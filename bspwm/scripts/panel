#!/bin/bash

# Source: https://github.com/addy-dclxvi/void-bspwm-dotfiles/blob/master/home/addy/.scripts/vanela

# Just a simple Lemonbar script
# Only clickable workspaces, window title, and clock
# Spamming command every second using shell to generate statusline is not really efficient
# So I only put those three items
# If I need other status informations
# I'd rather to call them using Dunst

# Workspace indicator is generated using bspc subscribe
# Which only update if there is an reaction on bspwm
# Window title is generated using xtitle
# Which also has subscribe event ability
# Clock is generated using looped date command
# Only update every thirty seconds

# Based on default example from Bspwm GitHub repository
# Some parts are modified to make them look like what i want
# Cheers! Addy

getcolors () {
  FOREGROUND=$(xrdb -query | grep 'foreground:'| awk '{print $NF}')
  BACKGROUND=$(xrdb -query | grep 'background:'| awk '{print $NF}')
  BLACK=$(xrdb -query | grep 'color0:'| awk '{print $NF}')
  RED=$(xrdb -query | grep 'color1:'| awk '{print $NF}')
  GREEN=$(xrdb -query | grep 'color2:'| awk '{print $NF}')
  YELLOW=$(xrdb -query | grep 'color3:'| awk '{print $NF}')
  BLUE=$(xrdb -query | grep 'color4:'| awk '{print $NF}')
  MAGENTA=$(xrdb -query | grep 'color5:'| awk '{print $NF}')
  CYAN=$(xrdb -query | grep 'color6:'| awk '{print $NF}')
  WHITE=$(xrdb -query | grep 'color7:'| awk '{print $NF}')
}

# Only use the function above if the cache of xcolors couldn't be found
if [ -e ~/.cache/xcolors ]; then
  . ~/.cache/xcolors
else
  getcolors
fi

# Panel configurations
PANEL_HEIGHT=35
PANEL_HORIZONTAL_OFFSET=$(bspc config window_gap)
PANEL_VERTICAL_OFFSET=8
PANEL_WIDTH=$(($(xrandr |awk '$0 ~ "*" {print $1}' | cut -d 'x' -f 1) - $((PANEL_HORIZONTAL_OFFSET * 2))
))
PANEL_FONT="Fira Code SemiBold:size=14"
PANEL_ICON_FONT="FontAwesome:size=13"
PANEL_FIFO=/tmp/panel-fifo
PANEL_WM_NAME=bspwm_panel
COLOR_DEFAULT_FG="$FOREGROUND"
COLOR_DEFAULT_BG="$BACKGROUND"
COLOR_MONITOR_FG="$FOREGROUND"
COLOR_MONITOR_BG="$BACKGROUND"
COLOR_FOCUSED_MONITOR_FG="$CYAN"
COLOR_FOCUSED_MONITOR_BG="$BACKGROUND"
COLOR_FREE_FG="$FOREGROUND"
COLOR_FREE_BG="$BACKGROUND"
COLOR_FOCUSED_FREE_FG="$BLUE"
COLOR_FOCUSED_FREE_BG="$BACKGROUND"
COLOR_OCCUPIED_FG="$FOREGROUND"
COLOR_OCCUPIED_BG="$BACKGROUND"
COLOR_FOCUSED_OCCUPIED_FG="$BLUE"
COLOR_FOCUSED_OCCUPIED_BG="$BACKGROUND"
COLOR_URGENT_FG="$YELLOW"
COLOR_URGENT_BG="$BACKGROUND"
COLOR_FOCUSED_URGENT_FG="$YELLOW"
COLOR_FOCUSED_URGENT_BG="$BACKGROUND"
COLOR_STATE_FG="$BACKGROUND"
COLOR_STATE_BG="$BACKGROUND"
COLOR_TITLE_FG="$FOREGROUND"
COLOR_TITLE_BG="$BACKGROUND"
COLOR_SYS_FG="$BACKGROUND"
COLOR_SYS_BG="$CYAN"
COLOR_WIFI_FG="$BACKGROUND"
COLOR_WIFI_BG="$GREEN"
COLOR_BATTERY_FG="$BACKGROUND"
COLOR_BATTERY_BG="$BLUE"

bspc config top_padding $((PANEL_HEIGHT + PANEL_VERTICAL_OFFSET))

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

clock() {
    while true; do
        date +"S%a %l:%M %p"
        sleep 30
    done
}
wifi() {
  while true; do
    nname=$(iwgetid -r)
    echo -n "N%{A:connman-gtk:}"
    if [[ $nname != "" ]]; then
      echo -n "$nname"
    else
      echo -n "Not connected"
    fi
    echo "%{A}"
    sleep 30
  done
}

battery() {
  while true; do
    status="$(cat /sys/class/power_supply/BAT0/status)"
    capacity="$(cat /sys/class/power_supply/BAT0/capacity)"
    color=false
    echo -n "B"
    if [[ $status == "Charging" ]]; then
        echo -en "\uf0e7"
    elif [[ $capacity -ge  "85" ]]; then
        echo -en "\uf240"
    elif [[ $capacity -ge "65" ]]; then
        echo -en "\uf241"
    elif [[ $capacity -ge "45" ]]; then
        echo -en "\uf242"
    elif [[ $capacity -ge "15" ]]; then
        echo -en "\uf243"
    elif [[ $capacity -ge "0" ]]; then
        color=true
        echo -en "%{F$RED}\uf244"
    fi
    echo -n "%{F-}"

    echo -n " $capacity%"

    if [[ $color ]]; then
        echo "%{F-}"
    else
        echo
    fi
    sleep 30
  done
}

# Just to make sure there is no double process
killall -9 lemonbar xtitle xdo clock wifi battery

# Echo every modules to PANEL_FIFO
clock > "$PANEL_FIFO" &
xtitle -t 70 -sf 'T%s\n' > "$PANEL_FIFO" &
bspc subscribe report > "$PANEL_FIFO" &
wifi > "$PANEL_FIFO" &
battery > "$PANEL_FIFO" &
num_mon=$(bspc query -M | wc -l)

# Then read those value
panel_bar() {
WM_BLURRED_ICON='\uf10c'
WM_BLURRED_FREE_ICON='\uf1db'
WM_FOCUSED_ICON='\uf111'
WIFI_ICON='\uf1eb'
while read -r line ; do
  case $line in
    B*)
      batinfo="%{F$COLOR_BATTERY_FG}%{B$COLOR_WIFI_BG} ${line#?} %{B-}%{F-}"
      ;;
    N*)
      # Network output
      netinfo="%{F$COLOR_WIFI_FG}%{B$COLOR_WIFI_BG} ${WIFI_ICON} ${line#?} %{B-}%{F-}"
      ;;
    S*)
      # clock output
      sys="%{F$COLOR_SYS_FG}%{B$COLOR_SYS_BG} ${line#?} %{B-}%{F-}"
      ;;
    T*)
      # xtitle output
      title="%{F$COLOR_TITLE_FG}%{B$COLOR_TITLE_BG} ${line#?} %{B-}%{F-}"
      ;;
    W*)
      # workspaces output
      wm=
      IFS=':'
      set -- ${line#?}
      while [ $# -gt 0 ] ; do
        item=$1
        name=${item#?}
        case $item in
          [mM]*)
            case $item in
              m*)
                # monitor
                FG=$COLOR_MONITOR_FG
                BG=$COLOR_MONITOR_BG
                on_focused_monitor=
                ;;
              M*)
                # focused monitor
                FG=$COLOR_FOCUSED_MONITOR_FG
                BG=$COLOR_FOCUSED_MONITOR_BG
                on_focused_monitor=1
                ;;
            esac
            [ $num_mon -lt 2 ] && shift && continue
            wm="${wm}%{F${FG}}%{B${BG}}%{A:bspc monitor -f ${name}:} ${name} %{A}%{B-}%{F-}"
            ;;
          [fFoOuU]*)
            case $item in
              f*)
                # free desktop
                FG=$COLOR_FREE_FG
                BG=$COLOR_FREE_BG
                UL=$BG
                output=$WM_BLURRED_FREE_ICON
                ;;
              F*)
                output=$WM_FOCUSED_ICON
                if [ "$on_focused_monitor" ] ; then
                  # focused free desktop
                  FG=$COLOR_FOCUSED_FREE_FG
                  BG=$COLOR_FOCUSED_FREE_BG
                  UL=$BG
                else
                  # active free desktop
                  FG=$COLOR_FREE_FG
                  BG=$COLOR_FREE_BG
                  UL=$COLOR_FOCUSED_FREE_BG
                fi
                ;;
              o*)
                output=$WM_BLURRED_ICON
                # occupied desktop
                FG=$COLOR_OCCUPIED_FG
                BG=$COLOR_OCCUPIED_BG
                UL=$BG
                ;;
              O*)
                output=$WM_FOCUSED_ICON
                if [ "$on_focused_monitor" ] ; then
                  # focused occupied desktop
                  FG=$COLOR_FOCUSED_OCCUPIED_FG
                  BG=$COLOR_FOCUSED_OCCUPIED_BG
                  UL=$BG
                else
                  # active occupied desktop
                  FG=$COLOR_OCCUPIED_FG
                  BG=$COLOR_OCCUPIED_BG
                  UL=$COLOR_FOCUSED_OCCUPIED_BG
                fi
                ;;
              u*)
                output=$WM_BLURRED_ICON
                # urgent desktop
                FG=$COLOR_URGENT_FG
                BG=$COLOR_URGENT_BG
                UL=$BG
                ;;
              U*)
                output=$WM_FOCUSED_ICON
                if [ "$on_focused_monitor" ] ; then
                  # focused urgent desktop
                  FG=$COLOR_FOCUSED_URGENT_FG
                  BG=$COLOR_FOCUSED_URGENT_BG
                  UL=$BG
                else
                  # active urgent desktop
                  FG=$COLOR_URGENT_FG
                  BG=$COLOR_URGENT_BG
                  UL=$COLOR_FOCUSED_URGENT_BG
                fi
                ;;
            esac
            wm="${wm}%{F${FG}}%{B${BG}}%{U${UL}}%{+u}%{A:bspc desktop -f ${name}:} ${output} %{A}%{B-}%{F-}%{-u}"
            ;;
          [LTG]*)
            # layout, state and flags
            wm="${wm}%{F$COLOR_STATE_FG}%{B$COLOR_STATE_BG} ${name} %{B-}%{F-}"
            ;;
        esac
        shift
      done
      ;;
  esac
  # printf "%s\n" "%{l}${wm}%{c}${title}%{r}${sys}"
  echo -e "%{l}${wm}%{c}${title}%{r}${netinfo}${batinfo}${sys}"
done
}

# Get all the results of the modules above then pipe them to Lemonbar
panel_bar < "$PANEL_FIFO" | lemonbar -a 12 \
-g "$PANEL_WIDTH"x"$PANEL_HEIGHT"+"$PANEL_HORIZONTAL_OFFSET"+"$PANEL_VERTICAL_OFFSET" \
-f "$PANEL_FONT" -f "$PANEL_ICON_FONT" -F "$COLOR_DEFAULT_FG" -B "$COLOR_DEFAULT_BG" -n "$PANEL_WM_NAME" | bash &

sleep 0.5
# Trigger the PANEL_FIFO to make it instantly refreshed after bspwmrc reloaded 
echo "dummy" > "$PANEL_FIFO"

sleep 0.5
# Rule the panel to make it hiding below fullscreen window
# I add 'sleep 0.5' to avoid xdo executed before the Lemonbar fully loaded
wid=$(xdo id -a "$PANEL_WM_NAME")
xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"

# Don't close this process
wait
