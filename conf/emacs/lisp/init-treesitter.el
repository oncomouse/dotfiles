;;; init-treesitter.el -- Configure treesitter
;;; Commentary:
;; Wow, Emacs built-in treesitter is pretty grim, for now. Going to continue to
;; use the old plugin.
;;; Code:
;; (defvar treesit-language-source-alist
;;       '(
;; 	(bash "https://github.com/tree-sitter/tree-sitter-bash")
;; 	(bibtex "https://github.com/latex-lsp/tree-sitter-bibtex")
;; 	(c "https://github.com/tree-sitter/tree-sitter-c")
;; 	(cmake "https://github.com/uyha/tree-sitter-cmake")
;; 	(comment "https://github.com/stsewd/tree-sitter-comment")
;; 	(cpp "https://github.com/tree-sitter/tree-sitter-cpp")
;; 	(css "https://github.com/tree-sitter/tree-sitter-css")
;; 	(diff "https://github.com/the-mikedavis/tree-sitter-diff")
;; 	(dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
;; 	(fish "https://github.com/ram02z/tree-sitter-fish")
;; 	(go "https://github.com/tree-sitter/tree-sitter-go")
;; 	(graphql "https://github.com/bkegley/tree-sitter-graphql")
;; 	(html "https://github.com/tree-sitter/tree-sitter-html")
;; 	(http "https://github.com/rest-nvim/tree-sitter-http")
;; 	(java "https://github.com/tree-sitter/tree-sitter-java")
;; 	(javascript "https://github.com/tree-sitter/tree-sitter-javascript")
;; 	(jsdoc "https://github.com/tree-sitter/tree-sitter-jsdoc")
;; 	(json "https://github.com/tree-sitter/tree-sitter-json")
;; 	(jsonc "https://gitlab.com/WhyNotHugo/tree-sitter-jsonc.git")
;; 	(latex "https://github.com/latex-lsp/tree-sitter-latex")
;; 	(lua "https://github.com/MunifTanjim/tree-sitter-lua")
;; 	(luadoc "https://github.com/amaanq/tree-sitter-luadoc")
;; 	(luap "https://github.com/amaanq/tree-sitter-luap")
;; 	(make "https://github.com/alemuller/tree-sitter-make")
;; 	(markdown "https://github.com/MDeiml/tree-sitter-markdown" "split_parser" "tree-sitter-markdown/src")
;; 	(markdown_inline "https://github.com/MDeiml/tree-sitter-markdown" "split_parser" "tree-sitter-markdown-inline/src")
;; 	(perl "https://github.com/tree-sitter-perl/tree-sitter-perl" "release")
;; 	(php "https://github.com/tree-sitter/tree-sitter-php")
;; 	(python "https://github.com/tree-sitter/tree-sitter-python")
;; 	(query "https://github.com/nvim-treesitter/tree-sitter-query")
;; 	(r "https://github.com/r-lib/tree-sitter-r")
;; 	(rasi "https://github.com/Fymyte/tree-sitter-rasi")
;; 	(regex "https://github.com/tree-sitter/tree-sitter-regex")
;; 	(ruby "https://github.com/tree-sitter/tree-sitter-ruby")
;; 	(rust "https://github.com/tree-sitter/tree-sitter-rust")
;; 	(scss "https://github.com/serenadeai/tree-sitter-scss")
;; 	(tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
;; 	(typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
;; 	(vim "https://github.com/neovim/tree-sitter-vim")
;; 	(vimdoc "https://github.com/neovim/tree-sitter-vimdoc")
;; 	(vue "https://github.com/ikatyang/tree-sitter-vue")
;; 	(xml "https://github.com/ObserverOfTime/tree-sitter-xml" "master" "tree-sitter-xml/src")
;; 	(yaml "https://github.com/ikatyang/tree-sitter-yaml")
;; 	(zig "https://github.com/maxxnino/tree-sitter-zig")))
;; (setq treesit-load-name-override-list '((js "libtree-sitter-js" "tree_sitter_javascript")))
;; (defun dotfiles/install-treesitter-grammars ()
;;   "Function to install (or update) treesitter grammars."
;;   (interactive)
;;   (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist)))

;; ;; Commented out == not developed yet
;; (setq major-mode-remap-alist
;;       '((bash-mode . bash-ts-mode)
;; 	(sh-mode . bash-ts-mode)
;; 	(bibtex-mode . bibtex-ts-mode)
;; 	(c-mode . c-ts-mode)
;; 	(cmake-mode . cmake-ts-mode)
;; 	(comment-mode . comment-ts-mode)
;; 	(cpp-mode . cpp-ts-mode)
;; 	(css-mode . css-ts-mode)
;; 	(diff-mode . diff-ts-mode)
;; 	(dockerfile-mode . dockerfile-ts-mode)
;; 	(fish-mode . fish-ts-mode)
;; 	(go-mode . go-ts-mode)
;; 	(graphql-mode . graphql-ts-mode)
;; 	(html-mode . html-ts-mode)
;; 	(http-mode . http-ts-mode)
;; 	(java-mode . java-ts-mode)
;; 	(js-mode . javascript-ts-mode) ;; Does not work
;; 	(jsdoc-mode . jsdoc-ts-mode)
;; 	(js-json-mode . json-ts-mode)
;; 	(jsonc-mode . jsonc-ts-mode)
;; 	(latex-mode . latex-ts-mode)
;; 	;; (lua-mode . lua-ts-mode)
;; 	(luadoc-mode . luadoc-ts-mode)
;; 	(luap-mode . luap-ts-mode)
;; 	;; (makefile-mode . make-ts-mode)
;; 	;; (makefile-gmake-mode . make-ts-mode)
;; 	(markdown-mode . markdown-ts-mode)
;; 	(markdown_inline-mode . markdown_inline-ts-mode)
;; 	(perl-mode . perl-ts-mode)
;; 	(php-mode . php-ts-mode)
;; 	(python-mode . python-ts-mode)
;; 	(query-mode . query-ts-mode)
;; 	(r-mode . r-ts-mode)
;; 	(rasi-mode . rasi-ts-mode)
;; 	(regex-mode . regex-ts-mode)
;; 	(ruby-mode . ruby-ts-mode)
;; 	(rust-mode . rust-ts-mode)
;; 	(scss-mode . scss-ts-mode)
;; 	(tsx-mode . tsx-ts-mode)
;; 	(typescript-mode . typescript-ts-mode)
;; 	(vim-mode . vim-ts-mode)
;; 	(vimdoc-mode . vimdoc-ts-mode)
;; 	(vue-mode . vue-ts-mode)
;; 	(xml-mode . xml-ts-mode)
;; 	(yaml-mode . yaml-ts-mode)
;; 	(zig-mode . zig-ts-mode))))

(use-package tree-sitter
  :straight t
  :config
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package tree-sitter-langs
  :straight t
  :after (tree-sitter))

(provide 'init-treesitter)
;;; init-treesitter.el ends here

