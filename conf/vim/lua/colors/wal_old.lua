-- luacheck: globals vim
local get_wal_theme = require('dotfiles.utils.wal')
local json_scheme = get_wal_theme()
local wal = {
	color0 = { c = 0, gui = json_scheme.colors.color0 and json_scheme.colors.color0 or "#000000" },
	color1 = { c = 1, gui = json_scheme.colors.color1 and json_scheme.colors.color1 or "#FF0000" },
	color2 = { c = 2, gui = json_scheme.colors.color2 and json_scheme.colors.color2 or "#00FF00" },
	color3 = { c = 3, gui = json_scheme.colors.color3 and json_scheme.colors.color3 or "#FFFF00" },
	color4 = { c = 4, gui = json_scheme.colors.color4 and json_scheme.colors.color4 or "#0000FF" },
	color5 = { c = 5, gui = json_scheme.colors.color5 and json_scheme.colors.color5 or "#FF00FF" },
	color6 = { c = 6, gui = json_scheme.colors.color6 and json_scheme.colors.color6 or "#00FFFF" },
	color7 = { c = 7, gui = json_scheme.colors.color7 and json_scheme.colors.color7 or "#000000" },
	color8 = { c = 8, gui = json_scheme.colors.color8 and json_scheme.colors.color8 or "#FFFFFF" },
	color9 = { c = 9, gui = json_scheme.colors.color9 and json_scheme.colors.color9 or "#FF0000" },
	color10 = { c = 10, gui = json_scheme.colors.color10 and json_scheme.colors.color10 or "#00FF00" },
	color11 = { c = 11, gui = json_scheme.colors.color11 and json_scheme.colors.color11 or "#FFFF00" },
	color12 = { c = 12, gui = json_scheme.colors.color12 and json_scheme.colors.color12 or "#0000FF" },
	color13 = { c = 13, gui = json_scheme.colors.color13 and json_scheme.colors.color13 or "#FF00FF" },
	color14 = { c = 14, gui = json_scheme.colors.color14 and json_scheme.colors.color14 or "#00FFFF" },
	color15 = { c = 15, gui = json_scheme.colors.color15 and json_scheme.colors.color15 or "#FFFFFF" },
	base00 = { c = 235, gui = json_scheme.colors.base00 and json_scheme.colors.base00 or json_scheme.colors.color0 },
	base01 = { c = 237, gui = json_scheme.colors.base01 and json_scheme.colors.base01 or json_scheme.colors.color0 },
	base02 = { c = 240, gui = json_scheme.colors.base02 and json_scheme.colors.base02 or json_scheme.colors.color0 },
	base03 = { c = 243, gui = json_scheme.colors.base03 and json_scheme.colors.base03 or json_scheme.colors.color0 },
	base04 = { c = 145, gui = json_scheme.colors.base04 and json_scheme.colors.base04 or json_scheme.colors.color0 },
	base05 = { c = 251, gui = json_scheme.colors.base05 and json_scheme.colors.base05 or json_scheme.colors.color0 },
	base06 = { c = 252, gui = json_scheme.colors.base06 and json_scheme.colors.base06 or json_scheme.colors.color0 },
	base07 = { c = 253, gui = json_scheme.colors.base07 and json_scheme.colors.base07 or json_scheme.colors.color0 },
	red = { c = 5, gui = json_scheme.colors.base08 and json_scheme.colors.red or json_scheme.colors.color5 },
	orange = { c = 1, gui = json_scheme.colors.base09 and json_scheme.colors.base09 or json_scheme.colors.color1 },
	yellow = { c = 3, gui = json_scheme.colors.base0A and json_scheme.colors.base0A or json_scheme.colors.color3 },
	green = { c = 2, gui = json_scheme.colors.base0B and json_scheme.colors.base0B or json_scheme.colors.color2 },
	cyan = { c = 6, gui = json_scheme.colors.base0C and json_scheme.colors.base0C or json_scheme.colors.color6 },
	blue = { c = 4, gui = json_scheme.colors.base0D and json_scheme.colors.base0D or json_scheme.colors.color4 },
	purple = { c = 176, gui = json_scheme.colors.base0E and json_scheme.colors.base0E or '#D4BFFF' },
	brown = { c = 9, gui = json_scheme.colors.base0F and json_scheme.colors.base0F or json_scheme.colors.color9 },
}

function wal.terminal_colors()
	vim.g.terminal_color_0 = wal.color0.gui
	vim.g.terminal_color_1 = wal.orange.gui
	vim.g.terminal_color_2 = wal.green.gui
	vim.g.terminal_color_3 = wal.yellow.gui
	vim.g.terminal_color_4 = wal.blue.gui
	vim.g.terminal_color_5 = wal.red.gui
	vim.g.terminal_color_6 = wal.cyan.gui
	vim.g.terminal_color_7 = wal.base04.gui
	vim.g.terminal_color_8 = wal.base01.gui
	vim.g.terminal_color_9 = wal.color9.gui
	vim.g.terminal_color_10 = wal.color10.gui
	vim.g.terminal_color_11 = wal.color11.gui
	vim.g.terminal_color_12 = wal.color12.gui
	vim.g.terminal_color_13 = wal.color13.gui
	vim.g.terminal_color_14 = wal.color14.gui
	vim.g.terminal_color_15 = wal.color15.gui
end
function wal.highlight(group, color)
	if color.link then
		vim.api.nvim_command('highlight default link ' .. group .. ' ' .. color.link)
		return
	end
	local style = color.style and 'gui=' .. color.style or 'gui=NONE'
	local term_style = color.term and ' term=' .. color.term or 'term=NONE'
	local fg = color.fg and 'guifg=' .. color.fg.gui .. ' ctermfg=' .. color.fg.c or 'guifg=NONE ctermfg=NONE'
	local bg = color.bg and 'guibg=' .. color.bg.gui .. ' ctermbg=' .. color.bg.c or 'guibg=NONE ctermbg=NONE'
	local sp = color.sp and 'guisp=' .. color.sp.gui or ''
   vim.api.nvim_command(
		'highlight ' .. group .. ' ' ..
		style .. ' ' ..
		term_style .. ' ' ..
		fg .. ' ' ..
		bg .. ' ' ..
		sp
	)
end
function wal.after_scheme()
	local scheme = {
		RedSign = {fg=wal.red, bg=wal.base01},
		YellowSign = {fg=wal.yellow, bg=wal.base01},
		BlueSign = {fg=wal.blue, bg=wal.base01},
		GreenSign = {fg=wal.green, bg=wal.base01},
		Orange = {fg=wal.orange},
		Green = {fg=wal.green},
		Yellow = {fg=wal.yellow},
		Blue = {fg=wal.blue},
		Red = {fg=wal.red},
		Cyan = {fg=wal.cyan},
		Grey = {fg=wal.base04},
		OrangeBright = {fg=wal.color9},
		GreenBright = {fg=wal.color10},
		YellowBright = {fg=wal.color11},
		BlueBright = {fg=wal.color12},
		RedBright = {fg=wal.color13},
		CyanBright = {fg=wal.color14},
		Fg = {fg=wal.color15},
		OrangeEmphasis = {fg=wal.orange, style="bold"},
		GreenEmphasis = {fg=wal.green, style="bold"},
		YellowEmphasis = {fg=wal.yellow, style="bold"},
		BlueEmphasis = {fg=wal.blue, style="bold"},
		RedEmphasis = {fg=wal.red, style="bold"},
		CyanEmphasis = {fg=wal.cyan, style="bold"},
		GreyEmphasis = {fg=wal.base04, style="bold"},
		OrangeBrightEmphasis = {fg=wal.color9, style="bold"},
		GreenBrightEmphasis = {fg=wal.color10, style="bold"},
		YellowBrightEmphasis = {fg=wal.color11, style="bold"},
		BlueBrightEmphasis = {fg=wal.color12, style="bold"},
		RedBrightEmphasis = {fg=wal.color13, style="bold"},
		CyanBrightEmphasis = {fg=wal.color14, style="bold"},
		FgEmphasis = {fg=wal.color15, style="bold"},
		OrangeItalic = {fg=wal.orange, style="italic"},
		GreenItalic = {fg=wal.green, style="italic"},
		YellowItalic = {fg=wal.yellow, style="italic"},
		BlueItalic = {fg=wal.blue, style="italic"},
		RedItalic = {fg=wal.red, style="italic"},
		CyanItalic = {fg=wal.cyan, style="italic"},
		GreyItalic = {fg=wal.base04, style="italic"},
		OrangeBrightItalic = {fg=wal.color9, style="italic"},
		GreenBrightItalic = {fg=wal.color10, style="italic"},
		YellowBrightItalic = {fg=wal.color11, style="italic"},
		BlueBrightItalic = {fg=wal.color12, style="italic"},
		RedBrightItalic = {fg=wal.color13, style="italic"},
		CyanBrightItalic = {fg=wal.color14, style="italic"},
		FgItalic = {fg=wal.color15, style="italic"},
		ErrorFloat = { link = "RedSign" },
		WarningFloat = { link = "YellowSign" },
		InfoFloat = { link = "BlueSign" },
		HintFloat = { link = "GreenSign" },
		ErrorText = { link = "RedSign" },
		WarningText = { link = "YellowSign" },
		InfoText = { link = "BlueSign" },
		HintText = { link = "GreenSign" },
		LspDiagnosticsFloatingError = { link = "ErrorFloat" },
		LspDiagnosticsFloatingWarning = { link = "WarningFloat" },
		LspDiagnosticsFloatingInformation = { link = "InfoFloat" },
		LspDiagnosticsFloatingHint = { link = "HintFloat" },
		LspDiagnosticsDefaultError = { link = "ErrorText" },
		LspDiagnosticsDefaultWarning = { link = "WarningText" },
		LspDiagnosticsDefaultInformation = { link = "InfoText" },
		LspDiagnosticsDefaultHint = { link = "HintText" },
		LspDiagnosticsVirtualTextError = { link = "Grey" },
		LspDiagnosticsVirtualTextWarning = { link = "Grey" },
		LspDiagnosticsVirtualTextInformation = { link = "Grey" },
		LspDiagnosticsVirtualTextHint = { link = "Grey" },
		LspDiagnosticsUnderlineError = { link = "ErrorText" },
		LspDiagnosticsUnderlineWarning = { link = "WarningText" },
		LspDiagnosticsUnderlineInformation = { link = "InfoText" },
		LspDiagnosticsUnderlineHint = { link = "HintText" },
		LspDiagnosticsSignError = { link = "RedSign" },
		LspDiagnosticsSignWarning = { link = "YellowSign" },
		LspDiagnosticsSignInformation = { link = "BlueSign" },
		LspDiagnosticsSignHint = { link = "GreenSign" },
		LspReferenceText = { link = "CurrentWord" },
		LspReferenceRead = { link = "CurrentWord" },
		LspReferenceWrite = { link = "CurrentWord" },
		TermCursor = { link = "Cursor" },
		healthError = { link = "Red" },
		healthSuccess = { link = "Green" },
		healthWarning = { link = "Yellow" },
		-- TSAnnotation = { link = "Blue" },
		-- TSAttribute = { link = "Blue" },
		-- TSBoolean = { link = "BlueBright" },
		-- TSCharacter = { link = "Yellow" },
		-- TSComment = { link = "Grey" },
		-- TSConditional = { link = "Red" },
		-- TSConstBuiltin = { link = "Orange" },
		-- TSConstMacro = { link = "Orange" },
		-- TSConstant = { link = "Orange" },
		TSConstructor = { fg = wal.base07 },
		-- TSEmphasis = {style="bold"},
		-- TSError = { link = "Red" },
		-- TSException = { link = "Red" },
		-- TSField = { link = "Green" },
		-- TSFloat = { link = "BlueBright" },
		-- TSFuncBuiltin = { link = "OrangeBright" },
		-- TSFuncMacro = { link = "OrangeBright" },
		TSFunction = { fg = wal.cyan },
		TSInclude = { fg = wal.cyan },
		TSKeyword = { fg = wal.purple },
		-- TSKeywordFunction = { link = "Cyan" },
		TSKeywordOperator = { fg = wal.purple },
		TSLabel = { fg = wal.cyan },
		TSMethod = { fg = wal.blue },
		-- TSNamespace = { link = "BlueBright" },
		-- TSNumber = { link = "BlueBright" },
		TSOperator = { fg = wal.base07 },
		TSParameter = { fg = wal.yellow },
		-- TSParameterReference = { link = "Orange" },
		TSProperty = { fg = wal.yellow },
		TSPunctBracket = { fg = wal.cyan },
		TSPunctDelimiter = { fg = wal.base07 },
		-- TSPunctSpecial = { link = "Fg" },
		-- TSRepeat = { link = "Red" },
		-- TSString = { link = "BlueBright" },
		-- TSStringEscape = { link = "Green" },
		-- TSStringRegex = { link = "Green" },
		-- TSStructure = { link = "Blue" },
		TSTag = { fg = wal.base07 },
		TSTagDelimiter = { fg = wal.cyan },
		-- TSText = { link = "Green" },
		TSType = { fg = wal.blue },
		-- TSTypeBuiltin = { link = "Blue" },
		-- TSURI = { link = "markdownUrl" },
		-- TSUnderline = {style="underline"},
		TSVariable = { fg = wal.base07 },
		TSVariableBuiltin = { fg = wal.red },
		DiffAdd = {style="bold", bg=wal.green, fg=wal.background},
		DiffDelete = {style="none", bg=wal.orange, fg=wal.background},
		DiffChange = {style="bold", bg=wal.base01, fg=wal.base04},
		DiffText = {style="bold", bg=wal.base01, fg=wal.color9},
		diffAdded = {fg=wal.green},
		diffRemoved = {fg=wal.orange},
		diffNewFile = {style="none", fg=wal.blue},
		diffFile = {style="none", fg=wal.yellow},
		GitGutterAdd = {bg=wal.base01, fg=wal.green},
		GitGutterChange = {style="bold", bg=wal.base01, fg=wal.base04},
		GitGutterDelete = {bg=wal.base01, fg=wal.orange},
		GitGutterChangeDelete = {style="bold", bg=wal.base01, fg=wal.orange},
		NeomakeError = {style="none", bg=wal.orange, fg=wal.background},
		NeomakeInfo = {style="none", bg=wal.cyan, fg=wal.background},
		NeomakeWarning = {style="none", bg=wal.yellow, fg=wal.background},
		NeomakeMessage = {style="none", bg=wal.color11, fg=wal.background},
		NeomakeVirtualtextInfoDefault = {fg=wal.color14},
		NeomakeVirtualtextMessageDefault = {fg=wal.color11},
		NeomakeVirtualtextWarningDefault = {fg=wal.yellow},
		NeomakeVirtualtextErrorDefault = {fg=wal.orange},
		NeomakeStatusGood = {style="none", bg=wal.green, fg=wal.background},
		NeomakeStatusGoodNC = {style="none", bg=wal.base01, fg=wal.green},
		NeomakeStatColorDefault = {style="none", bg=wal.blue, fg=wal.background},
		NeomakeStatColorTypeE = {style="none", bg=wal.orange, fg=wal.background},
		NeomakeStatColorTypeW = {style="none", bg=wal.yellow, fg=wal.background},
		MarkdownRule = {style="bold", bg=wal.base01, fg=wal.color10},
		MarkdownHeading = {style="bold", fg=wal.foreground},
		MarkdownH1 = { link = "MarkdownHeading" },
		MarkdownH2 = { link = "MarkdownHeading" },
		MarkdownH3 = { link = "MarkdownHeading" },
		MarkdownH4 = { link = "MarkdownHeading" },
		MarkdownH5 = { link = "MarkdownHeading" },
		MarkdownH6 = { link = "MarkdownHeading" },
		MarkdownHeadingDelimiter = { link = "MarkdownHeading" },
		MarkdownHeadingRule = { link = "MarkdownHeading" },
		MarkdownBold = {style="bold", fg=wal.color9},
		MarkdownBoldDelimiter = { link = "MarkdownBold" },
		MarkdownItalic = {style="italic", fg=wal.yellow},
		MarkdownItalicDelimiter = { link = "MarkdownItalic" },
		MarkdownUrl = {style="underline", fg=wal.blue},
		MarkdownLinkText = {style="none", fg=wal.color12},
		MarkdownLinkDelimiter = {style="bold", fg=wal.foreground},
		MarkdownLinkTextDelimiter = { link = "MarkdownLinkDelimiter" },
		MarkdownCode = {fg=wal.red},
		MarkdownCodeDelimiter = { link = "MarkdownCode" },
		MarkdownCodeBlock = {fg=wal.foreground},
		MarkdownListMarker = {style="none", fg=wal.green},
		MarkdownOrderedListMarker = { link = "MarkdownListMarker" },
		YcmErrorSection = {style="undercurl", sp=wal.orange},
		YcmWarningSection = {style="undercurl", sp=wal.yellow},
		SyntasticError = {style="undercurl", sp=wal.orange},
		SyntasticWarning = {style="undercurl", sp=wal.yellow},
		SyntasticErrorSing = {fg=wal.background, bg=wal.orange},
		SyntasticWarningSign = {fg=wal.background, bg=wal.yellow},
		Visual = {bg=wal.color12},
		Search = {bg=wal.yellow, fg=wal.background},
		gitcommitSummary = {fg=wal.color14},
		gitcommitOverflow = {style="bold", bg=wal.color13, fg=wal.background},
		IncSearch = {bg=wal.color9, fg=wal.background},
		HighlightedyankRegion = {bg=wal.color9, fg=wal.background},
		CocErrorSign = {bg=wal.base01, fg=wal.orange},
		CocWarningSign = {bg=wal.base01, fg=wal.yellow},
		CocInfoSign = {bg=wal.base01, fg=wal.orange},
		ALEErrorSign = {bg=wal.orange, fg=wal.base01},
		ALEWarningSign = {bg=wal.yellow, fg=wal.base01},
		ALEInfoSign = {bg=wal.base01, fg=wal.base04},
		VisualMode = {fg=wal.background, bg=wal.color9, style="bold"},
		InsertMode = {fg=wal.background, bg=wal.green, style="bold"},
		ReplaceMode = {fg=wal.background, bg=wal.color13, style="bold"},
		CommandMode = {fg=wal.background, bg=wal.cyan, style="bold"},
		TerminalMode = {fg=wal.background, bg=wal.purple, style="bold"},
		NormalMode = {fg=wal.background, bg=wal.blue, style="bold"},
		VisualModeInv = {fg=wal.color9, bg=wal.background},
		InsertModeInv = {fg=wal.green, bg=wal.background},
		ReplaceModeInv = {fg=wal.color13, bg=wal.background},
		CommandModeInv = {fg=wal.cyan, bg=wal.background},
		TerminalModeInv = {fg=wal.color12, bg=wal.background},
		NormalModeInv = {fg=wal.blue, bg=wal.background},
		StatusLine = {fg=wal.base01},
		StatusLineNC = {fg=wal.color11, bg=wal.base01},
		StatusLineTerm = {fg=wal.color10, bg=wal.green},
		StatusLineTermNC = {fg=wal.color11, bg=wal.base01},
		User1 = {fg=wal.base04, bg=wal.base01},
		User2 = { link = "Normal" },
		StatusWarning = {fg=wal.base01, bg=wal.yellow},
		StatusError = {fg=wal.base01, bg=wal.orange},
		StatusOk = {fg=wal.foreground, bg=wal.base01},
		StatusWarningInv = {bg=wal.background, fg=wal.yellow},
		StatusErrorInv = {bg=wal.background, fg=wal.orange},
		StatusOkInv = {bg=wal.background, fg=wal.base01},
		StatusInfoInv = {fg=wal.base01, bg=wal.background},
		StatusLineInfo = {fg=wal.foreground, bg=wal.base03},
		StatusLineInfoInv = {fg=wal.base03, bg=wal.background},
		SpellBad = {style="underline", fg=wal.foreground, bg=wal.base01, sp=wal.color13},
		ALEError = {style="underline", fg=wal.foreground, bg=wal.base01, sp=wal.orange},
		ALEWarning = {style="underline", fg=wal.foreground, bg=wal.base01, sp=wal.yellow},
		Pmenu = {style="none", bg=wal.base01, fg=wal.foreground},
		MarkdownItalic = {fg=wal.color13},
		htmlItalic = { link = "MarkdownItalic" },
		htmlBold = { link = "MarkdownBold" },
		mkdBlockquote = {style="italic", fg=wal.base04},
		semshiLocal = { fg=wal.brown},
		semshiGlobal = { fg=wal.orange},
		semshiImported = { fg=wal.brown, style="bold"},
		semshiParameter = { fg=wal.blue},
		semshiParameterUnused = {fg=wal.color12, style="underline"},
		semshiFree = { fg=wal.red},
		semshiBuiltin = { fg=wal.color13},
		semshiAttribute = { fg=wal.cyan},
		semshiSelf = { fg=wal.base04},
		semshiUnresolved = { fg=wal.yellow, style="underline"},
		semshiSelected = { fg=wal.background, bg={ gui = "#ff875f", c=209 }},
	   semshiErrorSign = { fg=wal.foreground, bg={ gui = "#d70000", c=160 }},
	   semshiErrorChar = { fg=wal.foreground, bg={ gui = "#d70000", c=160 }},
	}
	return scheme
end
function wal.scheme()
	local scheme = {
		Normal = {bg=wal.background, fg=wal.foreground},
		Visual = {bg=wal.foreground, fg=wal.background},
		Search = {style="underline,bold", bg=wal.base01, fg=wal.foreground, term="bold"},
		IncSearch = {style="underline,bold", bg=wal.base04, fg=wal.background, term="none,bold"},
		VertSplit = {style="none"},
		TabLine = {style="none", bg=wal.base01, fg=wal.base04},
		TabLineSel = {style="none", bg=wal.cyan, fg=wal.background},
		TabLineFill = {style="none"},
		Comment = {style="italic", fg=wal.base04},
		Todo = {style="bold", bg=wal.base01, fg=wal.color11},
		Warning = {style="none", bg=wal.yellow, fg=wal.background},
		WarningMsg = {style="none", bg=wal.yellow, fg=wal.background},
		Error = {style="none", bg=wal.orange, fg=wal.background},
		ErrorMsg = {style="none", bg=wal.orange, fg=wal.background},
		MatchParen = {style="underline,bold", bg=wal.base01, fg=wal.base04, term="bold"},
		ToolbarLine = {bg=wal.base04, fg=wal.background, term="none"},
		ToolbarButton = {style="bold", bg=wal.base04, fg=wal.background, term="none"},
		WildMenu = {bg=wal.background, fg=wal.foreground, term="standout"},
		Terminal = {bg=wal.background, fg=wal.foreground, term="none"},
		constant = {fg=wal.blue},
		Number = {fg=wal.blue},
		Float = {fg=wal.blue},
		String = {fg=wal.color12},
		Function = {fg=wal.red},
		Identifier = {fg=wal.color13, term="none"},
		Label = {fg=wal.red},
		Tag = {fg=wal.red},
		Keyword = {fg=wal.color13, style="bold"},
		Character = {style="bold", fg=wal.color14},
		Type = {style="none,bold", fg=wal.cyan, term="none,bold"},
		Boolean = {fg=wal.cyan},
		StorageClass = {fg=wal.cyan},
		Structure = {fg=wal.cyan},
		Typedef = {style="bold", fg=wal.color14},
		Conditional = {style="bold", fg=wal.green},
		Statement = {style="none", fg=wal.color10},
		Repeat = {style="bold", fg=wal.color10},
		Operator = {style="bold", fg=wal.foreground},
		Exception = {style="bold", fg=wal.orange},
		Preproc = {style="none", fg=wal.color9, term="none"},
		PreCondit = {style="bold", fg=wal.color9},
		Macro = {style="bold", fg=wal.color9},
		Include = {fg=wal.color9},
		Define = {fg=wal.color9},
		Title = {style="bold", bg=wal.background, fg=wal.cyan},
		Delimeter = {style="bold", fg=wal.red},
		Delimiter = {style="bold", fg=wal.red},
		SpecialComment = {style="bold", fg=wal.red},
		Debug = {fg=wal.color13},
		LineNr = {bg=wal.base01, fg=wal.base04, term="none"},
		Cursor = {bg=wal.foreground, fg=wal.background},
		CursorLine = {style="none", bg=wal.base01, term="none"},
		CursorColumn = {style="none", bg=wal.base01, term="none"},
		CursorLineNr = {style="bold", bg=wal.base04, fg=wal.background},
		ColorColumn = {bg=wal.base01, fg=wal.foreground, term="none"},
		SignColumn = {bg=wal.base01, fg=wal.base04, term="none"},
		Folded = {bg=wal.base01, fg=wal.base04},
		FoldColumn = {bg=wal.base01, fg=wal.base04},
		Special = {style="bold", fg=wal.color11, term="none"},
		SpecialKey = {style="none", bg=wal.base01, fg=wal.base04},
		SpecialChar = {style="bold", fg=wal.color11},
		NonText = {style="none", bg=wal.base01, fg=wal.base04},
		EndOfBuffer = {style="bold", fg=wal.base04},
		Directory = {style="none", fg=wal.green, term="none"},
		Question = {style="bold", fg=wal.color11},
		MoreMsg = {fg=wal.color10},
		ModeMsg = {style="bold", fg=wal.green},
		VimOption = {fg=wal.red},
		VimGroup = {fg=wal.red},
		Underlined = {style="underline", fg=wal.foreground},
		Ignore = {bg=wal.base01, fg=wal.base04},
		Conceal = {fg=wal.base03, style="nocombine"},
		SpellBad = {bg=wal.orange, fg=wal.background},
		SpellCap = {bg=wal.yellow, fg=wal.background},
		SpellRare = {bg=wal.color13, fg=wal.background},
		SpellLocal = {bg=wal.color14, fg=wal.background},
		Pmenu = {style="italic", bg=wal.base01, fg=wal.foreground},
		PmenuSel = {style="none,bold", bg=wal.base04, fg=wal.background, term="bold"},
		PmenuSbar = {bg=wal.base01},
		PmenuThumb = {bg=wal.base04},
	}
	return scheme
end
local async_load_plugin
async_load_plugin = vim.loop.new_async(vim.schedule_wrap(function ()
	wal.terminal_colors()
	local syntax = wal.after_scheme()
	for group,colors in pairs(syntax) do
		wal.highlight(group,colors)
	end
	async_load_plugin:close()
end))
function wal.colorscheme()
	vim.cmd('hi clear')
	if vim.fn.exists('syntax_on') then
		vim.cmd('syntax reset')
	end
	vim.o.background = 'dark'
	vim.o.termguicolors = true
	vim.g.colors_name = 'wal'
	local syntax = wal.scheme()
	for group,colors in pairs(syntax) do
		wal.highlight(group,colors)
	end
	async_load_plugin:send()
end

wal.colorscheme()

return wal
