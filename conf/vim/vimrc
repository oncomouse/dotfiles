scriptencoding utf8
" Dotfiles Settings: {{{
if !empty(glob('~/dotfiles/conf/vim/')) && !(&runtimepath =~# expand('~/dotfiles/conf/vim/'))
	set runtimepath+=~/dotfiles/conf/vim/
endif

" Don't use the minimal minpac install in vimrc-minimal
let g:skip_minimal_minpac = 1

" Load Basic Settings:
runtime vimrc-minimal

" Add Dotfiles After To RTP:
set runtimepath+=~/dotfiles/conf/vim/after/

" Set Spellfile Location:
set spellfile=~/dotfiles/conf/vim/spell/en.utf-8.add

" }}}
" Mac NeoVim Settings: {{{
if has('mac') && has('nvim')
	let g:python_host_prog='/usr/bin/python2.7'
	let g:python3_host_prog='/usr/local/bin/python3'
	let g:ruby_host_prog=expand('~/.asdf/shims/neovim-ruby-host')
	let g:node_host_prog='/usr/local/lib/node_modules/neovim/bin/cli.js'
	" This is macOS only, I believe, but it fixes slow start-up for clipboard:
	let g:clipboard = {
	\ 'copy': {'+': 'pbcopy', '*': 'pbcopy'},
	\ 'paste': {'+': 'pbpaste', '*': 'pbpaste'},
	\ 'name': 'pbcopy', 'cache_enabled': 0
	\ }
endif
" }}}
" Autogroups {{{
augroup dotfiles-settings
	autocmd!
augroup END
" }}}
" Statusline {{{
lua << EOF
dotfiles = _G.dotfiles or {}
function dotfiles.sl_wc()
	return vim.tbl_contains({
		"markdown",
		"txt",
		"vimwiki"
	}, vim.opt.filetype:get()) and " W:" .. vim.fn.wordcount().words or ""
end
function dotfiles.sl_dg()
	local d = ''
	for kind,marker in pairs({ Error = " E:", Warning = " W:", Information = " I:", Hint = " H:" }) do
		local c = vim.lsp.diagnostic.get_count(0, kind)
		if c ~= 0 then
			d = d .. marker .. tostring(c)
		end
	end
	return d
end
local statusline = " %0.45f%m%h%w%r%= %y%{v:lua.dotfiles.sl_wc()} %l:%c %p%%%{v:lua.dotfiles.sl_dg()} "
local statusline_nc = " %0.45f%m%h%w%r%="
function dotfiles.sl_stl()
	return vim.g.statusline_winid == vim.fn.win_getid() and statusline or statusline_nc
end
vim.opt.statusline="%!v:lua.dotfiles.sl_stl()"
EOF
" }}}
" Tabs {{{
set tabstop=4
set shiftwidth=4
set softtabstop=4
set noexpandtab
" }}}
" Folds {{{
autocmd dotfiles-settings FileType vim setlocal foldmethod=marker foldlevel=0
autocmd dotfiles-settings FileType diff setlocal nofoldenable
" }}}
" Maps {{{
let g:enable_todo = 1
" Highlight a block and type "@" to run a macro on the block:
xnoremap <silent> @ :<C-u>call visualat#execute_macro_over_visual_range()<CR>

" Calculator:
inoremap <C-A> <C-O>yiW<End>=<C-R>=<C-R>0<CR>

" Shortcut to view current syntax highlighting group:
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
	\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
	\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Uniform Visual Motion Toggle: {{{
map <leader>w <cmd>call edit_mode#toggle()<CR>
" }}}
" FZF Bindings: {{{
nmap <silent> <c-p> <cmd>Files<CR>
nmap <silent> <leader>a <cmd>Buffers<CR>
" }}}
" Fold Maps: {{{
onoremap iz <cmd>normal! [zj0v]zk$<cr>
xnoremap iz <cmd>normal! [zj0o]zk$<cr>
onoremap az <cmd>normal! [zv]z$<cr>
xnoremap az <cmd>normal! [zo]z$<cr>
" }}}
" }}}
" Theme: {{{
" Fancy color for macs and X11 sessions:
if has('mac') || exists('$DISPLAY')
	let &t_8f='<Esc>[38;2;%lu;%lu;%lum'
	let &t_8b='<Esc>[48;2;%lu;%lu;%lum'
	set termguicolors

	let s:wal_cache = expand(($XDG_CACHE_HOME ? $XDG_CACHE_HOME : $HOME.'/.cache') . '/wal/vim')
	if isdirectory(s:wal_cache)
		exe 'set runtimepath+='.s:wal_cache
		colorscheme wal
	else
		colorscheme default
	endif
else
	colorscheme default
endif
" }}}
" Other Settings {{{
" Highlighted Yank:
autocmd dotfiles-settings TextYankPost * silent! lua vim.highlight.on_yank {higroup="IncSearch", timeout=500}

" Close Preview Window:
autocmd dotfiles-settings CompleteDone * if pumvisible() == 0 | pclose | endif

" On opening a file, jump to the last known cursor position (see :h line())
autocmd dotfiles-settings BufReadPost *
\ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit' |
\	 exe "normal! g`\"" |
\ endif 

" Fix window resizing
autocmd dotfiles-settings VimEnter * silent exec "!kill -s SIGWINCH $PPID"

" Update FASD For NeoVim: {{{
function! s:fasd_update() abort
	if empty(&buftype)
		call jobstart(['fasd', '-A', expand('%:p')])
	endif
endfunction
autocmd dotfiles-settings BufWinEnter,BufFilePost * call s:fasd_update()
" }}}
" }}}
" Writing: {{{
let g:bibfiles = '~/Seadrive/My Libraries/My Library/Documents/Academic Stuff/library.bib'
" }}}
" Plugins {{{
function! s:packpath() abort
	return luaeval('require("dotfiles.utils.xdg")("XDG_DATA_HOME")') . '/minpac/full'
endfunction

function! PackInit(...) abort
	let l:installing = get(a:, 0, 0)
	call dynapac#init(l:installing, { 'dir': s:packpath() })
	call dynapac#add('k-takata/minpac', { 'type': 'opt' })
	call dynapac#add('tpope/vim-sensible')
	call dynapac#add('xero/securemodelines')
	call dynapac#add('stevearc/qf_helper.nvim')
	function! s:qf_helper() abort
		call luaeval('require("qf_helper").setup(_A)', {
			\ 'quickfix': {
			\		'default_bindings': v:false,
			\ },
			\ 'loclist' : {
			\		'default_bindings': v:false,
			\ }
			\ })
	endfunction
	autocmd! dotfiles-settings VimEnter * call s:qf_helper()
	call dynapac#add('sickill/vim-pasta') " fix block paste for Neovim
	call dynapac#add('tpope/vim-commentary') " gc<motion> to (un)comment
	call dynapac#add('tpope/vim-repeat')
	call dynapac#add('oncomouse/vim-surround') " ys to add, cs to change, ds to delete. f, F for function, t, T for tag
	call dynapac#add('airblade/vim-rooter') " Set project root
	let g:rooter_patterns = [
		\'Rakefile',
		\'package.json',
		\'.git/',
		\'Gemfile',
		\'pyproject.toml',
		\'setup.py',
		\]
	set path=,,
	call dynapac#add('wellle/targets.vim') " add next block n]) targets, plus words in commas (a,), asterisks (a*), etc
	call dynapac#add('cohama/lexima.vim') " Autopairs + Endwise
	function! s:make_rule(at, end, filetype, syntax)
		return {
		\ 'char': '<CR>',
		\ 'input': '<CR>',
		\ 'input_after': '<CR>' . a:end,
		\ 'at': a:at,
		\ 'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1' . a:end,
		\ 'filetype': a:filetype,
		\ 'syntax': a:syntax,
		\ }
	endfunction
	function! s:extend_endwise() abort
		" Lua endwise rules:
		call lexima#add_rule(s:make_rule('^\s*if\>.*then\%(.*[^.:@$]\<end\>\)\@!.*\%#', 'end', 'lua', []))
		call lexima#add_rule(s:make_rule('^\s*\%(for\|while\)\>.*do\%(.*[^.:@$]\<end\>\)\@!.*\%#', 'end', 'lua', []))
		call lexima#add_rule(s:make_rule('^\s*\%(local\)\=.*function\>\%(.*[^.:@$]\<end\>\)\@!.*\%#', 'end', 'lua', []))
	endfunction
	autocmd! dotfiles-settings FileType lua call s:extend_endwise()
	inoremap <silent> <Plug>(dotfiles-lexima) <C-r>=lexima#insmode#leave_till_eol("")<CR>
	inoremap <silent> <C-l> <Plug>(dotfiles-lexima)
	call dynapac#add('norcalli/nvim-colorizer.lua')
	call dynapac#add('junegunn/fzf.vim') " Add shorcuts for FZF
	command! -bang -nargs=? -complete=dir Files call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--reverse', '--info=inline']}), <bang>0)
	let g:fzf_layout = { 'window': { 'width': 1, 'height': 0.4, 'yoffset': 1, 'border': 'top' } }
	let g:fzf_action = {
	\'ctrl-s': 'split',
	\'ctrl-v': 'vsplit',
	\'ctrl-t': 'tabnew',
	\'ctrl-e': 'edit',
	\}
	let g:fzf_nvim_statusline = 0 " disable statusline overwriting
	call dynapac#add('lambdalisue/gina.vim', { 'cmd': 'Gina' })
	function! s:gina() abort
		call gina#custom#command#option('status', '--opener', &previewheight . 'split')
		call gina#custom#command#option('commit', '--opener', &previewheight . 'split')
		call gina#custom#command#option('diff', '--opener', &previewheight . 'split')
		call gina#custom#command#option('status', '--group', 'short')
		call gina#custom#command#option('commit', '--group', 'short')
		call gina#custom#command#option('diff', '--group', 'short')
		" Implement vim-fugitive commands in Gina:
		call gina#custom#mapping#nmap('status', 'cc', ':<C-u>Gina commit<CR>', {'noremap': 1, 'silent': 1})
	endfunction
	autocmd! dotfiles-settings User gina.vim call s:gina()
	call dynapac#add('oncomouse/vim-grep', { 'cmd': ['Grep', 'LGrep'] })
	call dynapac#add('windwp/nvim-ts-autotag', { 'ft': [ 'html', 'javascript', 'javascriptreact' ] })
	let g:ts_types = luaeval('require("dotfiles.utils.ts_filetypes").ts_types')
	call dynapac#add('nvim-treesitter/nvim-treesitter-textobjects', { 'ft': g:ts_types })
	function! UpdateTreesitter(...) abort
		packadd nvim-treesitter
		TSUpdate
	endfunction
	call dynapac#add('nvim-treesitter/nvim-treesitter', { 'ft': g:ts_types, 'do': function('UpdateTreesitter') })
	lua require("dotfiles.utils.ts_filetypes").ts_type_autocmds() 
	function! s:nvim_treesitter() abort
		call luaeval('require("nvim-treesitter.config").setup(_A)', {
			\ 'ensure_installed': 'maintained',
			\ 'highlight': { 'enable': v:true },
			\ 'indent': { 'enable': v:true },
			\ 'autotag': { 'enable': v:true },
			\ 'textobjects': { 'select': {
				\ 'enable': v:true,
				\ 'lookahead': v:true,
				\ 'keymaps': {
					\ 'af': '@function.outer',
					\ 'if': '@function.inner',
					\ 'ac': '@class.outer',
					\ 'ic': '@class.inner',
				\ }
			\ } }
			\ })
	endfunction
	autocmd! dotfiles-settings User nvim-treesiter call s:nvim_treesitter()
	call dynapac#add('oncomouse/vim-fish', { 'ft': 'fish' }) " Fish Syntax
	call dynapac#add('plasticboy/vim-markdown', { 'ft': 'markdown' }) " Markdown Syntax
	let g:vim_markdown_frontmatter = 1 " Format YAML
	let g:vim_markdown_strikethrough = 0 " Don"t format strikethrough
	let g:vim_markdown_conceal = 0 " Don"t conceal
	let g:vim_markdown_conceal_code_blocks = 0 " Don"t conceal code blocks
	let g:vim_markdown_math = 1 " Do process MathJaX and LaTeX math
	call dynapac#add('godlygeek/tabular', { 'cmd': [ 'Tabular', 'TableFormat' ] })
	call dynapac#add('neovim/nvim-lspconfig', { 'ft': [ 'css', 'html', 'javascript', 'json', 'lua', 'markdown', 'python', 'ruby', 'scss', 'sh', 'vim', 'yaml' ] })
	" Loaded with LSP, for when they are needed:
	call dynapac#add('hrsh7th/vim-vsnip', { 'type': 'opt', })
	call dynapac#add('hrsh7th/vim-vsnip-integ', { 'type': 'opt', })
	autocmd! dotfiles-settings User nvim-lspconfig lua require('dotfiles.nvim_lsp')
endfunction

exe 'set packpath+='.s:packpath()
command! PackUpdate call PackInit(1) | call minpac#update()
command! PackClean call PackInit(1) | call minpac#clean()
command! PackStatus call PackInit(1) | call minpac#status()
if &termguicolors
	packadd! nvim-colorizer.lua
	call luaeval('require("colorizer").setup(_A)', {
		\ '*': {},
		\ 'markdown': { 'names': v:false },
		\ 'text': { 'names': v:false },
		\ 'gina-commit': { 'names': v:false },
		\ 'css': { 'css': v:true },
		\ 'scss': { 'css': v:true },
		\})
endif
call PackInit()
" }}}
" # vim:foldmethod=marker
