scriptencoding utf8
" Dotfiles Settings: {{{
if !empty(glob('~/dotfiles/conf/vim/')) && !(&runtimepath =~# expand('~/dotfiles/conf/vim/'))
	set runtimepath+=~/dotfiles/conf/vim/
endif

let g:skip_minpac=1

" Load Basic Settings:
runtime vimrc-minimal

" Add Dotfiles After To RTP:
set runtimepath+=~/dotfiles/conf/vim/after/

" Set Spellfile Location:
set spellfile=~/dotfiles/conf/vim/spell/en.utf-8.add

" Statusline:
set statusline=%!dotfiles#statusline#statusline()
" }}}
" Mac NeoVim Settings: {{{
if has('mac') && has('nvim')
	let g:python_host_prog='/usr/bin/python2.7'
	let g:python3_host_prog='/usr/local/bin/python3'
	let g:ruby_host_prog=expand('~/.asdf/shims/neovim-ruby-host')
	let g:node_host_prog='/usr/local/lib/node_modules/neovim/bin/cli.js'
	" This is macOS only, I believe, but it fixes slow start-up for clipboard:
	let g:clipboard = {
	\ 'copy': {'+': 'pbcopy', '*': 'pbcopy'},
	\ 'paste': {'+': 'pbpaste', '*': 'pbpaste'},
	\ 'name': 'pbcopy', 'cache_enabled': 0
	\ }
endif
" }}}
" Autogroups {{{
augroup dotfiles-settings
	autocmd!
augroup END
augroup plug-settings
	autocmd!
augroup END
" }}}
" Tabs: {{{
set tabstop=4
set shiftwidth=4
set softtabstop=4
set noexpandtab
" }}}
" Folds: {{{
set foldmethod=syntax
autocmd dotfiles-settings FileType vim setlocal foldmethod=marker foldlevel=0
autocmd dotfiles-settings FileType css setlocal foldmethod=syntax foldlevel=0
autocmd dotfiles-settings FileType scss setlocal foldmethod=syntax foldlevel=0
autocmd dotfiles-settings FileType python setlocal foldmethod=indent
autocmd dotfiles-settings FileType diff setlocal nofoldenable
" }}}
" Plugins: {{{
" Install vim_plug if it is missing: {{{
if has('win32')
	let s:win_vimfiles = $HOME . '/AppData/Local/nvim/vimfiles'
	let g:plug_dir = s:win_vimfiles . '/plugged/'
	let g:plug_autoload_dir = s:win_vimfiles . '/autoload/'
else
	let s:xdg_home = ($XDG_DATA_HOME ? $XDG_DATA_HOME : $HOME.'/.local/share').'/nvim/site'
	let g:plug_dir = s:xdg_home . '/plugged/'
	let g:plug_autoload_dir = s:xdg_home . '/autoload/'
endif
if !isdirectory(g:plug_autoload_dir)
	silent execute '!curl -fLo '.g:plug_autoload_dir.'plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
	autocmd dotfiles-settings VimEnter * PlugInstall | source $MYVIMRC
endif
" }}}
call plug#begin(g:plug_dir)
" General Editing: {{{
Plug 'sickill/vim-pasta' " Indentation-forward pasting
Plug 'tpope/vim-repeat'
Plug 'oncomouse/vim-surround' " ys to add, cs to change, ds to delete. f, F for function, t, T for tag
Plug 'airblade/vim-rooter' " Set project root
let g:rooter_patterns = [
\ 'Rakefile',
\ 'package.json',
\ '.git/',
\ 'Gemfile',
\ 'pyproject.toml',
\ 'setup.py',
\ ]
" Set path expansion to pwd only, especially with vim-rooter running:
set path=,,
Plug 'wellle/targets.vim' " add next block n]) targets, plus words in commas (a,), asterisks (a*), etc
Plug 'cohama/lexima.vim' " Autopairs + Endwise
function! s:make_rule(at, end, filetype, syntax)
	return {
	\ 'char': '<CR>',
	\ 'input': '<CR>',
	\ 'input_after': '<CR>' . a:end,
	\ 'at': a:at,
	\ 'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1' . a:end,
	\ 'filetype': a:filetype,
	\ 'syntax': a:syntax,
	\ }
endfunction
function! s:extend_endwise() abort
	" Lua endwise rules:
	call lexima#add_rule(s:make_rule('^\s*if\>.*then\%(.*[^.:@$]\<end\>\)\@!.*\%#', 'end', 'lua', []))
	call lexima#add_rule(s:make_rule('^\s*\%(for\|while\)\>.*do\%(.*[^.:@$]\<end\>\)\@!.*\%#', 'end', 'lua', []))
	call lexima#add_rule(s:make_rule('^\s*\%(local\)\=.*function\>\%(.*[^.:@$]\<end\>\)\@!.*\%#', 'end', 'lua', []))
endfunction
autocmd plug-settings VimEnter * call s:extend_endwise()
" inoremap <C-l> <C-r>=lexima#insmode#leave_till_eol("")<CR>
Plug 'Konfekt/FastFold' " Better fold support
let g:fastfold_savehook = 1
let g:fastfold_fold_command_suffixes =	['x','X','a','A','o','O','c','C', 'r', 'R', 'm', 'M']
let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
let g:fastfold_minlines = 0
" }}}
" Git Support: {{{
Plug 'lambdalisue/gina.vim' " :Gina status to schedule; :Gina commit to commit
function! s:load_gina() abort
	call gina#custom#command#option('status', '--opener', &previewheight . 'split')
	call gina#custom#command#option('commit', '--opener', &previewheight . 'split')
	call gina#custom#command#option('diff', '--opener', &previewheight . 'split')
	call gina#custom#command#option('status', '--group', 'short')
	call gina#custom#command#option('commit', '--group', 'short')
	call gina#custom#command#option('diff', '--group', 'short')
	" Implement vim-fugitive commands in Gina:
	call gina#custom#mapping#nmap('status', 'cc', ':<C-u>Gina commit<CR>', {'noremap': 1, 'silent': 1})
endfunction
autocmd plug-settings VimEnter * call s:load_gina()
cnoreabbrev gina Gina
" }}}
" FZF Support: {{{
" macOS Homebrew
if isdirectory('/usr/local/opt/fzf')
	set runtimepath+=/usr/local/opt/fzf
" Arch
elseif isdirectory('/usr/share/vim/vimfiles')
	set runtimepath+=/usr/share/vim/vimfiles
" Local install
elseif isdirectory('~/.fzf')
	set runtimepath+=~/.fzf
" Fallback
else
	Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
endif
Plug 'junegunn/fzf.vim' " Add shorcuts for FZF
Plug 'gfanto/fzf-lsp.nvim', { 'branch': 'main' }
" }}}
" General Editing: {{{
Plug 'norcalli/nvim-colorizer.lua' " HTML codes and HTML color words to colors
Plug 'windwp/nvim-ts-autotag', { 'branch': 'main' } " Auotmatically close HTML tags
" }}}
" Syntax: {{{
Plug 'nvim-treesitter/nvim-treesitter'
Plug 'nvim-treesitter/nvim-treesitter-textobjects'
Plug 'plasticboy/vim-markdown' " Markdown Syntax
let g:vim_markdown_frontmatter = 1 " Format YAML
let g:vim_markdown_strikethrough = 0 " Don't format strikethrough
let g:vim_markdown_conceal = 0 " Don't conceal
let g:vim_markdown_conceal_code_blocks = 0 " Don't conceal code blocks
let g:vim_markdown_math = 1 " Do process MathJaX and LaTeX math
Plug 'cakebaker/scss-syntax.vim' " SCSS Syntax
Plug 'oncomouse/vim-fish' " Fish Syntax & Async Completion
" }}}
Plug 'neovim/nvim-lspconfig'
" Writing: {{{
Plug 'godlygeek/tabular' " :Tabular /| to auto-align tables (also :TableFormat in markdown)
Plug 'kana/vim-textobj-user', { 'for': ['markdown', 'text'] } " Allow custom textobj definitions
Plug 'reedes/vim-textobj-sentence', { 'for': ['markdown', 'text'] } " Use as & is for selecting sentences; g) and g( for moving
Plug 'reedes/vim-textobj-quote', { 'for': ['markdown', 'text'] } " Makes aq & iq for smart quotes
let g:textobj#quote#educate = 0
" Initialize the plugin when it is dynamically loaded:
autocmd plug-settings User vim-textobj-sentence call textobj#sentence#init()
autocmd plug-settings User vim-textobj-quote call textobj#quote#init()
" }}}
call plug#end()
" }}}
" Maps: {{{
let g:dwm_map_keys = 0
let g:dwm_load = 0
" Highlight a block and type "@" to run a macro on the block:
xnoremap <silent> @ :<C-u>call visualat#execute_macro_over_visual_range()<CR>
" <F4> makes:
nnoremap <silent><buffer> <F4> :make!<CR>
" Update fast folds:
nmap zuz <Plug>(FastFoldUpdate)
" Grep project:
function s:grep_or_qfgrep()
	if &buftype ==# 'quickfix'
		let l:input = input('QFGrep/')
		if len(l:input) > 0
			execute 'Cfilter /'.l:input.'/'
		endif
	else
		let l:input = input('Grep/')
		if len(l:input) > 0
			execute 'Grep ' . l:input
		endif
	endif 
endfunction
nnoremap <silent> <leader>/ <cmd>call <SID>grep_or_qfgrep()<CR>
" Calculator (not sure how this works):
inoremap <C-A> <C-O>yiW<End>=<C-R>=<C-R>0<CR>
" Shortcut to view current syntax highlighting group:
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
	\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
	\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
" List Bindings: {{{
nnoremap <silent> <leader>d :call dotfiles#lists#toggle('Location List', 'l')<CR>
nnoremap <silent> <leader>q :call dotfiles#lists#toggle('Quickfix List', 'c')<CR>
"}}}
" Default Bindings: {{{
nmap <silent> <Plug>(dotfiles-diagnostic-next) <cmd>cnext<CR>
nmap <silent> <Plug>(dotfiles-diagnostic-previous) <cmd>cprev<CR>
" }}}
" Standard Fuzzy Bindings: {{{
nmap <silent> <c-p> <Plug>(dotfiles-files)
nmap <silent> <leader>F <Plug>(dotfiles-home-files)
nmap <silent> <leader>a <Plug>(dotfiles-buffers)
nmap <silent> <leader>A <Plug>(dotfiles-windows)
nmap <silent> <leader>l <Plug>(dotfiles-lines)
nmap <silent> <leader>? <Plug>(dotfiles-commands)
" }}}
" Standard LSP Bindings: {{{
" As with Fuzzy bindings (above), we set all the LSP commands to Plug
" bindings and then rebind them here to the keys we actually want to use:
nmap <silent> <F2>		<Plug>(dotfiles-rename)
nmap <silent> <F5>		<Plug>(dotfiles-commands)
vmap <silent> ga		<Plug>(dotfiles-codeaction-selected)
nmap <silent> ga		<Plug>(dotfiles-codeaction)
nmap <silent> gl		<Plug>(dotfiles-codelens)
nmap <silent> gd		<Plug>(dotfiles-definition)
nmap <silent> gy		<Plug>(dotfiles-type-definition)
nmap <silent> gi		<Plug>(dotfiles-implementation)
nmap <silent> gr		<Plug>(dotfiles-references)
nmap <silent> <leader>s <Plug>(dotfiles-document-symbols)
nmap <silent> K			<Plug>(dotfiles-documentation)
nmap <silent> [d		<Plug>(dotfiles-diagnostic-previous)
nmap <silent> ]d		<Plug>(dotfiles-diagnostic-next)
" }}}
" }}}
" Theme: {{{
set background=dark
" Fancy Colors for Desktop Mode:
if exists('+termguicolors')
	let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
	let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
	set termguicolors
	" nvim-colorizer:
	lua require'colorizer'.setup{'*',markdown={names=false},text={names=false}}
endif
exe 'set runtimepath+='.expand(($XDG_CACHE_HOME ? $XDG_CACHE_HOME : $HOME.'/.cache') . '/wal/vim')
colorscheme wal
" }}}
" Other Settings: {{{

" Highlighted Yank:
autocmd plug-settings TextYankPost * silent! lua vim.highlight.on_yank {higroup="IncSearch", timeout=500}

" Treesitter:
lua require('dotfiles.treesitter')

" Close Preview Window:
autocmd dotfiles-settings CompleteDone * if pumvisible() == 0 | pclose | endif

" On opening a file, jump to the last known cursor position (see :h line())
autocmd dotfiles-settings BufReadPost *
\ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit' |
\	 exe "normal! g`\"" |
\ endif 

" Load Autocompletion:
call dotfiles#autocomplete#fzf#init()
lua require('dotfiles.nvim_lsp')

" Update FASD For NeoVim: {{{
if has('nvim')
	function! s:fasd_update() abort
		if empty(&buftype)
			call jobstart(['fasd', '-A', expand('%:p')])
		endif
	endfunction
	autocmd dotfiles-settings BufWinEnter,BufFilePost * call s:fasd_update()
endif
" }}}
" }}}
" # vim:foldmethod=marker
