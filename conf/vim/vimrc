scriptencoding utf8
" In case this was loaded without a wrapper:
if !(&runtimepath =~# expand('~/dotfiles/vim/').',')
  let &runtimepath .= ','.expand('~/dotfiles/vim/')
endif
" Mac NeoVim Settings: {{{
  if has('mac') && has('nvim')
    let g:python_host_prog='/usr/bin/python2.7'
    let g:python3_host_prog='/usr/local/bin/python3'
    let g:ruby_host_prog=expand('~/.asdf/shims/neovim-ruby-host')
    let g:node_host_prog='/usr/local/lib/node_modules/neovim/bin/cli.js'
    " This is macOS only, I believe, but it fixes slow start-up for clipboard:
    let g:clipboard = {
          \'copy': {'+': 'pbcopy', '*': 'pbcopy'},
          \'paste': {'+': 'pbpaste', '*': 'pbpaste'},
          \'name': 'pbcopy', 'cache_enabled': 0
          \}
  endif
" }}}
" Dotfiles Settings: {{{
  let g:dotfiles_mode = get(g:, 'dotfiles_mode', 'desktop')
  let g:complete_package = 'clap' " fzf, clap, or coc.nvim
  " Location of BiBLaTeX repo:
  let g:bibliography_file = expand('~/Seafile/My Library/Documents/Academic Stuff/library.bib')
  " This avoids highlighting big files:
  let g:large_file = 20*1024*1024
  " Set RTP for Wal stuff:
  if g:dotfiles_mode ==# 'desktop'
    let &runtimepath .= ','.expand('~/.cache/wal/vim/')
  endif
" }}}
" Basic Vim Settings: {{{
  set mouse=a " Mouse support
  if has('clipboard')
    if has('unnamedplus')
      set clipboard=unnamedplus,unnamed
    else
      set clipboard=unnamed
    endif
  endif

  " Load Basic Settings:
  runtime vimrc-minimal

  " Set Leader:
  let mapleader = "\<Space>"
  let maplocalleader = ','

  " Add Dotfiles After To RTP:
  let &runtimepath .= ','.expand('~/dotfiles/vim/after/')

  " Show Updates Of Commands:
  if has('nvim')
    set inccommand=split
  endif

  " Set Spellfile Location:
  set spellfile=~/dotfiles/vim/spell/en.utf-8.add

  " Grep:
  if executable('rg')
    set grepprg=rg\ --vimgrep
  elseif executable('ag')
    set grepprg=ag\ --vimgrep
  endif

  " Completion:
  set completeopt=menuone,noselect,noinsert,preview
  " Shut off completion messages
  set shortmess+=c
  " prevent a condition where vim lags due to searching include files.
  set complete-=i

  " Statusline:
  set statusline=%!dotfiles#statusline#statusline()
" }}}
" Tabs: {{{
  set tabstop=8
  set shiftwidth=2
  set softtabstop=2
  set expandtab
  " Override Defaults: {{{
    augroup my-tabstops
      autocmd!
      " Go, Lua
      autocmd FileType markdown,c,cpp,go,lua,sxhkdrc setlocal tabstop=4
      autocmd FileType markdown,c,cpp,go,lua,sxhkdrc setlocal shiftwidth=4
      autocmd FileType markdown,c,cpp,go,lua,sxhkdrc setlocal noexpandtab
      " JavaScript
      autocmd FileType javascript,javascriptreact setlocal tabstop=2
      autocmd FileType javascript,javascriptreact setlocal shiftwidth=2
      autocmd FileType javascript,javascriptreact setlocal softtabstop=2
      autocmd FileType javascript,javascriptreact setlocal expandtab
    augroup END
  " }}}
" }}}
" Folds: {{{
  if g:dotfiles_mode ==# 'server'
    set nofoldenable " no folding in server mode
  else
    set foldmethod=syntax
    set foldlevel=99
    augroup custom-folds
      autocmd!
      autocmd FileType vim setlocal foldmethod=marker foldlevel=0
      autocmd FileType css setlocal foldmethod=syntax foldlevel=0
      autocmd FileType scss setlocal foldmethod=syntax foldlevel=0
      autocmd FileType diff setlocal nofoldenable
    augroup END
  endif
" }}}
" Plugins: {{{
  " Install vim_plug if it is missing:
  let g:neovim_plug_dir = ($XDG_DATA_HOME ? $XDG_DATA_HOME : $HOME).'/.local/share/nvim/site'
  let g:plug_autoload_dir = has('nvim') ? g:neovim_plug_dir.'/autoload' : '~/.vim/autoload'
  if empty(glob(g:plug_autoload_dir.'/plug.vim'))
    silent execute '!curl -fLo '.g:plug_autoload_dir.'/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    augroup vim_plug
      autocmd!
      autocmd VimEnter * PlugInstall | source $MYVIMRC
    augroup END
  endif
  call plug#begin(has('nvim') ? g:neovim_plug_dir . '/plugged/' : '~/.vim/plugged/' . g:dotfiles_mode)
  " Get Started: {{{
    Plug 'xero/securemodelines' " Secure modelines
    set nomodeline
    let g:secure_modelines_verbose = 0
    let g:secure_modelines_modelines = 15
  " }}}
  " General Editing: {{{
    Plug 'sickill/vim-pasta' " Indentation-forward pasting
    Plug 'tpope/vim-repeat'
    Plug 'oncomouse/vim-surround' " ys to add, cs to change, ds to delete. f, F for function, t, T for tag
    Plug 'tpope/vim-commentary' " Comment w/ gcc or gc (visual)
    Plug 'airblade/vim-rooter' " Set project root
    let g:rooter_patterns = ['Rakefile', 'package.json', '.git/', 'Gemfile'
          \ , 'pyproject.toml', 'setup.py']
    Plug 'tpope/vim-endwise' " Add 'end' to the end of functions
    Plug 'wellle/targets.vim' " add next block n]) targets, plus words in commas (a,), asterisks (a*), etc
    Plug 'Raimondi/delimitMate' " Auto-pairing
    if has('nvim-0.5')
      augroup highlight_yank
        autocmd!
        autocmd TextYankPost * silent! lua vim.highlight.on_yank {higroup="IncSearch", timeout=500}
      augroup END
    else
      Plug 'machakann/vim-highlightedyank' " Highlights yank
    endif
  " }}}
  " Git Support: {{{
    Plug 'lambdalisue/gina.vim' " :Gina status to schedule; :Gina commit to commit
    function! s:load_gina() abort
      call gina#custom#command#option('status', '--opener', &previewheight . 'split')
      call gina#custom#command#option('commit', '--opener', &previewheight . 'split')
      call gina#custom#command#option('diff', '--opener', &previewheight . 'split')
      call gina#custom#command#option('status', '--group', 'short')
      call gina#custom#command#option('commit', '--group', 'short')
      call gina#custom#command#option('diff', '--group', 'short')
      " Implement vim-fugitive commands in Gina:
      call gina#custom#mapping#nmap('status', 'cc', ':<C-u>Gina commit<CR>', {'noremap': 1, 'silent': 1})
    endfunction
    augroup gina-startup
      autocmd!
      autocmd VimEnter * call s:load_gina()
    augroup END
    cnoreabbrev gina Gina
  " }}}
  " List Support: {{{
    if g:dotfiles_mode ==# 'server' || g:complete_package ==# 'fzf'
      Plug (isdirectory('/usr/local/opt/fzf') ? '/usr/local/opt/fzf' : '~/.fzf')
      Plug 'junegunn/fzf.vim' " Add shorcuts for FZF
    endif
  " }}}
  " Server-Only {{{
    if g:dotfiles_mode ==# 'server'
      Plug 'https://gitlab.com/protesilaos/tempus-themes-vim.git'
      Plug 'sheerun/vim-polyglot'
    endif
  " }}}
  if g:dotfiles_mode ==# 'desktop'
    " General Editing: {{{
      if has('nvim')
        Plug 'norcalli/nvim-colorizer.lua' " HTML codes and HTML color words to colors
      endif
      Plug 'alvan/vim-closetag' " Automatically close HTML tags
      let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.php,*.js,*.erb'
      let g:closetag_xhtml_filenames = '*.xhtml,*.js,*.erb'
      let g:closetag_filetypes = 'html,javascriptreact'
      let g:closetag_close_shortcut = '<leader>>'
      let g:closetag_regions = {
        \ 'typescriptreact': 'jsxRegion,tsxRegion',
        \ 'javascriptreact': 'jsxRegion',
        \ 'javascript': 'jsxRegion',
        \ }
      Plug 'Konfekt/FastFold' " Better fold support
      let g:fastfold_savehook = 1
      let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C', 'r', 'R', 'm', 'M']
      let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
      let g:fastfold_minlines = 0
      Plug 'Yggdroot/indentLine' " Indent with characters
      let g:indentLine_setColors = 1
      let g:indentLine_char = "\u22EE"
      let g:indentLine_color_term = 11
      let g:indentLine_fileTypeExclude = ['markdown', 'fzf']
      Plug 'sk1418/QFGrep' " <leader>g to filter qf list, <leader>v to inverse filter, <leader>r to restore
    " }}}
    " Syntax: {{{
      Plug 'baskerville/vim-sxhkdrc' " Sxhkd syntax
      Plug 'cespare/vim-toml' " TOML syntax
      Plug 'neoclide/vim-jsx-improve' " JSX (javascriptreact) Syntax
      Plug 'plasticboy/vim-markdown' " Markdown Syntax
      let g:vim_markdown_frontmatter = 1 " Format YAML
      let g:vim_markdown_strikethrough = 0 " Don't format strikethrough
      let g:vim_markdown_conceal = 0 " Don't conceal
      let g:vim_markdown_conceal_code_blocks = 0 " Don't conceal code blocks
      let g:vim_markdown_math = 1 " Do process MathJaX and LaTeX math
      Plug 'cakebaker/scss-syntax.vim' " SCSS Syntax
      Plug 'oncomouse/vim-fish' " Fish Syntax & Async Completion
      Plug 'elzr/vim-json' " JSON Syntax
      let g:vim_json_syntax_conceal = 0
      Plug 'tbastos/vim-lua' " Lua Syntax
      Plug 'neovimhaskell/haskell-vim' " Haskell Syntax
      " Plug 'janet-lang/janet.vim' " Janet Syntax
      " Plug 'bakpakin/fennel.vim' " Fennel Syntax
      Plug 'numirias/semshi', { 'do': ':UpdateRemotePlugins' } " Variable Highlighting for Python
      " Plug 'guns/vim-sexp' " Sexp (list manipulation)
      " let g:sexp_filetypes = 'clojure,scheme,lisp,janet,fennel'
      " let g:sexp_enable_insert_mode_mappings = 0
      " Plug 'luochen1990/rainbow', { 'for': split(g:sexp_filetypes, ',')}
      " let g:rainbow_active = 0
      " let g:rainbow_conf = {
      "       \'guifgs': ['#d0913d','#96a42d','#8e9cc0','#d58888','#7aa880','#C594C5','#eb4034',],
      "       \}
      " function! s:add_rainbow() abort
      "   if &filetype !=# '' && g:sexp_filetypes =~# &filetype
      "     RainbowToggle
      "   endif
      " endfunction
      " augroup rainbow
      "   autocmd!
      "   autocmd VimEnter * call s:add_rainbow()
      " augroup END
    " }}}
    " REPL: {{{
      " Plug 'Olical/conjure', {'tag': 'v4.7.0'} " Conjure REPL Bridge
      " Plug 'Olical/aniseed' " Use Fennel in nvim
      " Plug 'tpope/vim-sexp-mappings-for-regular-people' " Better Sexp Mappings
      Plug 'jpalardy/vim-slime' " <c-c><c-c> to send visual selection to REPL
      let g:slime_target = has('nvim') ? 'neovim' : 'vimterminal'
      " Autorepl automatically starts a repl on language load and connects to
      " slime:
      Plug 'oncomouse/vim-autorepl'
      let g:autorepl_commands = {
            \'haskell': '~/.ghcup/bin/ghci',
            \'janet': '/usr/local/bin/janet -e "(import spork/netrepl) (netrepl/server)"',
            \'javascript': {'command': '/usr/local/bin/node', 'auto': 0},
            \'ruby': {'command': '~/.asdf/shims/irb', 'auto': 0},
            \}
    " }}}
    " Text Object Plugins: {{{
      Plug 'kana/vim-textobj-user' " Allow custom textobj definitions
      Plug 'kana/vim-textobj-function' " af, if, aF, iF select function
      Plug 'rhysd/vim-textobj-ruby' " ar for ruby objects
      Plug 'thinca/vim-textobj-function-javascript' " js function support
      Plug 'bps/vim-textobj-python' " function and class support for Python
    " }}}
    " Autocomplete: {{{
      " Need NeoYank for some lists to implement yank history:
      if g:complete_package ==# 'fzf'
        Plug 'Shougo/neoyank.vim'
        Plug 'oncomouse/fzf-neoyank' " Add Yank shortcut
      elseif g:complete_package ==# 'clap'
        Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
        let g:clap_insert_mode_only = v:true
        let g:clap_search_box_border_style = 'nil'
        let g:clap_theme = 'wal'
      endif
      " Load LSP + Completion:
      if g:complete_package =~# 'coc.nvim'
        Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
        let g:coc_config_home = expand('~/dotfiles/conf/vim/lsp-settings/coc.nvim/')
        let g:coc_global_extensions = [
        \   'coc-calc',
        \   'coc-css',
        \   'coc-diagnostic',
        \   'coc-eslint',
        \   'coc-fish',
        \   'coc-html',
        \   'coc-json',
        \   'coc-lists',
        \   'coc-prettier',
        \   'coc-python',
        \   'coc-solargraph',
        \   'coc-stylelintplus',
        \   'coc-styled-components',
        \   'coc-tsserver',
        \   'coc-vimlsp',
        \   'coc-yaml',
        \   'coc-yank',
        \]
      else
        " LSP Support: {{{
          if has('nvim-0.5')
            " Plug 'neovim/nvim-lspconfig'
            Plug 'nvim-treesitter/nvim-treesitter'
          endif
          Plug 'autozimu/LanguageClient-neovim', {
          \ 'branch': 'next',
          \ 'do': 'bash install.sh',
          \ }
          let g:LanguageClient_settingsPath = expand('~/dotfiles/conf/vim/lsp-settings/LanguageClient-neovim/settings.json')
          let g:LanguageClient_useVirtualText = 'CodeLens'
          " Turn off all diagnostic stuff (pump it all to ALE):
          let g:LanguageClient_diagnosticsEnable = 0
          " Debug:
          " let g:LanguageClient_loggingFile = expand('~/lc.log')
          " let g:LanguageClient_loggingLevel = 'DEBUG'
          " Always use hover:
          let g:LanguageClient_useFloatingHover = 0
          let g:LanguageClient_hoverPreview = 'Auto'
          " Root patterns:
          let g:LanguageClient_rootMarkers = g:rooter_patterns
          let g:LanguageClient_serverCommands = {
                \ 'javascript': ['/usr/bin/env', 'deno', 'lsp'],
                \ 'javascriptreact': ['/usr/bin/env', 'deno', 'lsp'],
                \ 'typescript': ['/usr/bin/env', 'deno', 'lsp'],
                \ 'typescriptreact': ['/usr/bin/env', 'deno', 'lsp'],
                \ 'python': ['/usr/bin/env', 'jedi-language-server'],
                \ 'haskell': ['/usr/bin/env', 'haskell-language-server-wrapper', '--lsp'],
                \ 'ruby': ['/usr/bin/env', 'solargraph', 'stdio'],
                \ 'json': ['/usr/bin/env', 'vscode-json-languageserver', '--stdio'],
                \ 'html': ['/usr/bin/env', 'vscode-html-languageserver', '--stdio'],
                \ 'scss': ['/usr/bin/env', 'vscode-css-languageserver', '--stdio'],
                \ 'css': ['/usr/bin/env', 'vscode-css-languageserver', '--stdio'],
                \ 'lua': ['/usr/bin/java', '-cp', '~/dotfiles/scripts/lsp/EmmyLua-LS-all.jar', 'com.tang.vscode.MainKt'],
                \ 'vim': ['/usr/bin/env', 'vim-language-server', '--stdio'],
                \ 'markdown': ['/usr/bin/env', 'citation-langserver'],
                \ 'bash': ['/usr/bin/env', 'bash-language-server', 'start'],
                \ 'sh': ['/usr/bin/env', 'bash-language-server', 'start'],
                \}
        " }}}
        " ALE For Linting: {{{
          Plug 'dense-analysis/ale'
          let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
          let g:ale_cursor_detail = 0
          " Always use preview for hover (only used w/ JS languages):
          " let g:ale_hover_to_preview = 1
          " We let our LSP client handle LSPs:
          let g:ale_disable_lsp = 1
          let g:ale_fix_on_save = 1
          let g:ale_pattern_options = {
            \  '\.min.js$': {'ale_enabled': 0},
            \  'build/.*$': {'ale_enabled': 0},
            \}
          let g:ale_set_signs = 0 " Turn off sign column
        " }}}
      endif
    " }}}
    " Writing: {{{
      Plug 'godlygeek/tabular' " :Tabular /| to auto-align tables (also :TableFormat in markdown)
      Plug 'reedes/vim-textobj-sentence', { 'for': ['markdown', 'text'] } " Use as & is for selecting sentences; g) and g( for moving
      Plug 'reedes/vim-textobj-quote', { 'for': ['markdown', 'text'] } " Makes aq & iq for smart quotes
      let g:textobj#quote#educate = 0
      " Initialize the plugin when it is dynamically loaded:
      augroup load-sentence
        autocmd!
        autocmd User vim-textobj-sentence call textobj#sentence#init()
        autocmd User vim-textobj-quote call textobj#quote#init()
      augroup END
    " }}}
  endif
call plug#end()
" }}}
" Maps: {{{
  " Insert newline at end of line:
  inoremap <silent> <M-CR> <END><CR>
  " Select whole file
  nnoremap <leader>vf ggVG
  " Clear currently highlighted regexp:
  nnoremap <silent> <leader>cr :let<C-u>let @/=""<CR>
  " Highlight a block and type "@" to run a macro on the block:
  xnoremap <silent> @ :<C-u>call visualat#execute_macro_over_visual_range()<CR>
  " <F4> makes:
  nnoremap <silent><buffer> <F4> :make!<CR>
  " Update fast folds:
  nmap zuz <Plug>(FastFoldUpdate)
  " Navigate quickfix:
  nnoremap <silent> ]q :cnext<CR>
  nnoremap <silent> [q :cprevious<CR>
  " Grep project:
  nnoremap <silent> <leader>/ :execute 'Grep ' . input('Grep/')<CR>
  " Calculator (not sure how this works):
  inoremap <C-A> <C-O>yiW<End>=<C-R>=<C-R>0<CR>
  " Shortcut to view current syntax highlighting group:
  map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
    \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
    \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
  " Standard Fuzzy Bindings: {{{
    " Every list source we could implement (see g:complete_package) implements
    " these commmands, so I can use CoC and it implements the FZF
    " interface. This unifies fuzzy list management:
    nnoremap <silent> <c-p> :Files<CR>
    nnoremap <silent> <leader>F :Files ~<CR>
    nnoremap <silent> <leader>d :call dotfiles#lists#toggle('Location List', 'l')<CR>
    nnoremap <silent> <leader>q :call dotfiles#lists#toggle('Quickfix List', 'c')<CR>
    nnoremap <silent> <leader>a :Buffers<CR>
    nnoremap <silent> <leader>A :Windows<CR>
    nnoremap <silent> <leader>l :BLines<CR>
    nnoremap <silent> <leader>? :Commands<CR>
    if g:dotfiles_mode ==# 'desktop'
      nnoremap <silent> <leader>y :Yanks<CR>
      nnoremap <silent> <leader>s :Symbols<CR>
    endif
  " }}}
  " Standard LSP Bindings: {{{
    " As with Fuzzy bindings (above), we set all the LSP commands to Plug
    " bindings and then rebind them here to the keys we actually want to use:
    if (g:dotfiles_mode ==# 'desktop')
      nmap <silent> <F2> <Plug>(dotfiles-rename)
      nmap <silent> <F5> <Plug>(dotfiles-commands)
      vmap <silent> ga   <Plug>(dotfiles-codeaction-selected)
      nmap <silent> ga   <Plug>(dotfiles-codeaction)
      nmap <silent> gl   <Plug>(dotfiles-codelens)
      nmap <silent> gd   <Plug>(dotfiles-definition)
      nmap <silent> gy   <Plug>(dotfiles-type-definition)
      nmap <silent> gi   <Plug>(dotfiles-implementation)
      nmap <silent> gr   <Plug>(dotfiles-references)
      nmap <silent> K    <Plug>(dotfiles-documentation)
      nmap <silent> [d   <Plug>(dotfiles-diagnostic-previous)
      nmap <silent> ]d   <Plug>(dotfiles-diagnostic-next)
    endif
  " }}}
" }}}
" Theme: {{{
set background=dark
" Only use termguicolors if in desktop mode:
if g:dotfiles_mode ==# 'desktop'
  if exists('+termguicolors')
    let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
    " nvim-colorizer:
    if has('nvim')
      lua require'colorizer'.setup{'*',markdown={names=false},text={names=false}}
    endif
  endif
  colorscheme wal
else
  augroup tempus_color_additions
    autocmd!
    autocmd ColorScheme tempus_classic call dotfiles#colors#tempus_color_additions()
  augroup END
  colorscheme tempus_classic
endif
" }}}
" Other Settings: {{{
  augroup dotfile-autocmds
    autocmd!
    " Close preview window:
    autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
    " On opening a file, jump to the last known cursor position (see :h line())
    autocmd! BufReadPost *
          \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit' |
          \   exe "normal! g`\"" |
          \ endif 
  augroup END
  " Load Autocompletion: {{{
  if g:dotfiles_mode ==# 'desktop'
    call dotfiles#autocomplete#init()
  elseif g:dotfiles_mode ==# 'server'
    call dotfiles#autocomplete#fzf#init()
  endif
  " }}}
  " Update FASD For NeoVim: {{{
  if has('nvim')
    function! s:fasd_update() abort
      if empty(&buftype)
        call jobstart(['fasd', '-A', expand('%:p')])
      endif
    endfunction
    augroup fasd
      autocmd!
      autocmd BufWinEnter,BufFilePost * call s:fasd_update()
    augroup END
  endif
  " }}}
" }}}
" Server Only Settings: {{{
  if dotfiles_mode ==# 'server'
    augroup dotfiles-server-au
      autocmd!
      " Turn on CursorLine Highlighting on Insert:
      autocmd InsertEnter,InsertLeave * set cul!
    augroup END
  endif
" }}}
" # vim:foldmethod=marker
