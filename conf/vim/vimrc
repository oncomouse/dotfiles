scriptencoding utf8
" Dotfiles Settings: {{{
if !empty(glob('~/dotfiles/conf/vim/')) && !(&runtimepath =~# expand('~/dotfiles/conf/vim/'))
	set runtimepath+=~/dotfiles/conf/vim/
endif

" Don't use the minimal minpac install in vimrc-minimal
let g:skip_minimal_minpac = 1

" Load Basic Settings:
runtime vimrc-minimal

" Add Dotfiles After To RTP:
set runtimepath+=~/dotfiles/conf/vim/after/

" Set Spellfile Location:
set spellfile=~/dotfiles/conf/vim/spell/en.utf-8.add

" }}}
" Mac NeoVim Settings: {{{
if has('mac') && has('nvim')
	let g:python_host_prog='/usr/bin/python2.7'
	let g:python3_host_prog='/usr/local/bin/python3'
	let g:ruby_host_prog=expand('~/.asdf/shims/neovim-ruby-host')
	let g:node_host_prog='/usr/local/lib/node_modules/neovim/bin/cli.js'
	" This is macOS only, I believe, but it fixes slow start-up for clipboard:
	let g:clipboard = {
	\ 'copy': {'+': 'pbcopy', '*': 'pbcopy'},
	\ 'paste': {'+': 'pbpaste', '*': 'pbpaste'},
	\ 'name': 'pbcopy', 'cache_enabled': 0
	\ }
endif
" }}}
" Autogroups {{{
augroup dotfiles-settings
	autocmd!
augroup END
" }}}
" Statusline {{{
lua require('dotfiles.statusline')
" }}}
" Tabs {{{
set tabstop=4
set shiftwidth=4
set softtabstop=4
set noexpandtab
" }}}
" Folds {{{
autocmd dotfiles-settings FileType vim setlocal foldmethod=marker foldlevel=0
autocmd dotfiles-settings FileType diff setlocal nofoldenable
" }}}
" Maps {{{
let g:enable_todo = 1
" Highlight a block and type "@" to run a macro on the block:
xnoremap <silent> @ :<C-u>call visualat#execute_macro_over_visual_range()<CR>

" Calculator:
inoremap <C-A> <C-O>yiW<End>=<C-R>=<C-R>0<CR>

" Shortcut to view current syntax highlighting group:
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
	\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
	\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Uniform Visual Motion Toggle: {{{
map <leader>w <cmd>call edit_mode#toggle()<CR>
" }}}
" FZF Bindings: {{{
nmap <silent> <c-p> <cmd>Files<CR>
nmap <silent> <leader>a <cmd>Buffers<CR>
" }}}
" Fold Maps: {{{
onoremap iz <cmd>normal! [zj0v]zk$<cr>
xnoremap iz <cmd>normal! [zj0o]zk$<cr>
onoremap az <cmd>normal! [zv]z$<cr>
xnoremap az <cmd>normal! [zo]z$<cr>
" }}}
" }}}
" Theme: {{{
" Fancy color for macs and X11 sessions:
if has('mac') || exists('$DISPLAY')
	let &t_8f='<Esc>[38;2;%lu;%lu;%lum'
	let &t_8b='<Esc>[48;2;%lu;%lu;%lum'
	set termguicolors

	let s:wal_cache = expand(($XDG_CACHE_HOME ? $XDG_CACHE_HOME : $HOME.'/.cache') . '/wal/vim')
	if isdirectory(s:wal_cache)
		exe 'set runtimepath+='.s:wal_cache
		colorscheme wal
	else
		colorscheme default
	endif
else
	colorscheme default
endif
" }}}
" Other Settings {{{
" Highlighted Yank:
autocmd dotfiles-settings TextYankPost * silent! lua vim.highlight.on_yank {higroup="IncSearch", timeout=500}

" Close Preview Window:
autocmd dotfiles-settings CompleteDone * if pumvisible() == 0 | pclose | endif

" On opening a file, jump to the last known cursor position (see :h line())
autocmd dotfiles-settings BufReadPost *
\ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit' |
\	 exe "normal! g`\"" |
\ endif 

" Fix window resizing
" autocmd dotfiles-settings VimEnter * silent exec "!kill -s SIGWINCH $PPID"

" Update FASD For NeoVim: {{{
function! s:fasd_update() abort
	if empty(&buftype)
		call jobstart(['fasd', '-A', expand('%:p')])
	endif
endfunction
autocmd dotfiles-settings BufWinEnter,BufFilePost * call s:fasd_update()
" }}}
" }}}
" Writing: {{{
let g:bibfiles = '~/Seadrive/My Libraries/My Library/Documents/Academic Stuff/library.bib'
" }}}
" Lexima Configuration {{{
function! s:make_rule(at, end, filetype, syntax)
	return {
	\ 'char': '<CR>',
	\ 'input': '<CR>',
	\ 'input_after': '<CR>' . a:end,
	\ 'at': a:at,
	\ 'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1' . a:end,
	\ 'filetype': a:filetype,
	\ 'syntax': a:syntax,
	\ }
endfunction
function! s:extend_endwise() abort
	" Lua endwise rules:
	call lexima#add_rule(s:make_rule('^\s*if\>.*then\%(.*[^.:@$]\<end\>\)\@!.*\%#', 'end', 'lua', []))
	call lexima#add_rule(s:make_rule('^\s*\%(for\|while\)\>.*do\%(.*[^.:@$]\<end\>\)\@!.*\%#', 'end', 'lua', []))
	call lexima#add_rule(s:make_rule('^\s*\%(local\)\=.*function\>\%(.*[^.:@$]\<end\>\)\@!.*\%#', 'end', 'lua', []))
endfunction
autocmd! dotfiles-settings FileType lua call s:extend_endwise()
inoremap <silent> <Plug>(dotfiles-lexima) <C-r>=lexima#insmode#leave_till_eol("")<CR>
imap <silent> <C-l> <Plug>(dotfiles-lexima)
" }}}
" Plugins {{{
lua require('dotfiles.plugins')
" }}}
" # vim:foldmethod=marker
