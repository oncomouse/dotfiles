scriptencoding utf8
" Dotfiles Settings: {{{
if !empty(glob('~/dotfiles/conf/vim')) && !(&runtimepath =~# expand('~/dotfiles/conf/vim'))
	set runtimepath+=~/dotfiles/conf/vim
endif

" Don't use the minimal minpac install in vimrc-minimal
let g:skip_minimal_minpac = 1

" Load Basic Settings:
runtime vimrc-minimal

" Add Dotfiles After To RTP:
set runtimepath+=~/dotfiles/conf/vim/after

" Set Spellfile Location:
set spellfile=~/dotfiles/conf/vim/spell/en.utf-8.add

" Disable Plugins {{{
let g:loaded_matchparen = 1
" }}}

" }}}
" Mac NeoVim Settings: {{{
if has('mac') && has('nvim')
	let g:python_host_prog='/usr/bin/python2.7'
	let g:python3_host_prog='/usr/local/bin/python3'
	let g:ruby_host_prog=expand('~/.asdf/shims/neovim-ruby-host')
	let g:node_host_prog='/usr/local/lib/node_modules/neovim/bin/cli.js'
	" This is macOS only, I believe, but it fixes slow start-up for clipboard:
	let g:clipboard = {
	\ 'copy': {'+': 'pbcopy', '*': 'pbcopy'},
	\ 'paste': {'+': 'pbpaste', '*': 'pbpaste'},
	\ 'name': 'pbcopy', 'cache_enabled': 0
	\ }
endif
" }}}
" Autogroups {{{
augroup dotfiles-settings
	autocmd!
augroup END
" }}}
" Statusline {{{
lua require('dotfiles.statusline')
" }}}
" Tabs {{{
set tabstop=4
set shiftwidth=4
set softtabstop=4
set noexpandtab
" }}}
" Maps {{{
let g:enable_todo = 1
" Highlight a block and type "@" to run a macro on the block:
xnoremap <silent> @ :<C-u>call visualat#execute_macro_over_visual_range()<CR>

" Calculator:
inoremap <C-A> <C-O>yiW<End>=<C-R>=<C-R>0<CR>

" Shortcut to view current syntax highlighting group:
map <F10> <cmd>echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
	\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
	\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Sourced from jessarcher/dotfiles {{{
"  \ https://github.com/jessarcher/dotfiles/blob/master/nvim/init.vim

" Allow gf to open non-existent files
map gf :edit <cfile><cr>

" Quicker switching between windows
nmap <silent> <C-h> <C-w>h
nmap <silent> <C-j> <C-w>j
nmap <silent> <C-k> <C-w>k
nmap <silent> <C-l> <C-w>l

" Reselect visual selection after indenting
vnoremap < <gv
vnoremap > >gv

" When text is wrapped, move by terminal rows, not lines, unless a count is provided
nnoremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
nnoremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

" Paste replace visual selection without copying it
vnoremap <leader>p "_dP
" }}}
" FZF Bindings: {{{
nmap <silent> <c-p> <cmd>Files<CR>
nmap <silent> <leader>a <cmd>Buffers<CR>
" }}}
" Fold Textobject Maps: {{{
onoremap iz <cmd>normal! [zj0v]zk$<cr>
xnoremap iz <cmd>normal! [zj0o]zk$<cr>
onoremap az <cmd>normal! [zv]z$<cr>
xnoremap az <cmd>normal! [zo]z$<cr>
" }}}
" }}}
" Theme: {{{
" Fancy color for macs and X11 sessions:
if has('mac') || exists('$DISPLAY') || exists('$WAYLAND-DISPLAY')
	let &t_8f='<Esc>[38;2;%lu;%lu;%lum'
	let &t_8b='<Esc>[48;2;%lu;%lu;%lum'
	set termguicolors

	lua<<EOF
EOF
	colorscheme lushwal
else
	colorscheme default
endif
" }}}
" Other Settings {{{
" Highlighted Yank:
autocmd dotfiles-settings TextYankPost * silent! lua vim.highlight.on_yank {higroup="IncSearch", timeout=500}

" Close Preview Window:
autocmd dotfiles-settings CompleteDone * if pumvisible() == 0 | pclose | endif

" On opening a file, jump to the last known cursor position (see :h line())
autocmd dotfiles-settings BufReadPost *
\ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit' |
\	 exe "normal! g`\"" |
\ endif 

" Fix window resizing
" autocmd dotfiles-settings VimEnter * silent exec "!kill -s SIGWINCH $PPID"

" Update FASD For NeoVim: {{{
function! s:fasd_update() abort
	if empty(&buftype)
		call jobstart(['fasd', '-A', expand('%:p')])
	endif
endfunction
autocmd dotfiles-settings BufWinEnter,BufFilePost * call s:fasd_update()

" }}}
" }}}
" Writing: {{{
let g:bibfiles = '~/Seadrive/My Libraries/My Library/Documents/Academic Stuff/library.bib'
" }}}
" Plugins {{{
" Lazy-load packer commands:
command! PackerInstall packadd packer.nvim | lua require('dotfiles.plugins').install()
command! PackerUpdate packadd packer.nvim | lua require('dotfiles.plugins').update()
command! PackerSync packadd packer.nvim | lua require('dotfiles.plugins').sync()
command! PackerClean packadd packer.nvim | lua require('dotfiles.plugins').clean()
command! PackerStatus packadd packer.nvim | lua require('dotfiles.plugins').status()
command! PackerCompile packadd packer.nvim | lua require('dotfiles.plugins').compile()

" Refresh packer lazy-loading when plugins.lua changes:
autocmd! dotfiles-settings BufWritePost plugins.lua source <afile> | PackerCompile

" Install packer.nvim, if it isn't present:
let g:install_path = stdpath('data') . '/site/pack/packer/opt/packer.nvim'
if empty(glob(g:install_path))
	call system(['git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', g:install_path])
	PackerSync
endif
" }}}
" vim:foldmethod=marker
