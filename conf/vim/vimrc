scriptencoding utf8
" Dotfiles Settings: {{{
if !empty(glob('~/dotfiles/conf/vim/')) && !(&runtimepath =~# expand('~/dotfiles/conf/vim/'))
	set runtimepath+=~/dotfiles/conf/vim/
endif

" Don't use the minimal minpac install in vimrc-minimal
let g:skip_minimal_minpac = 1

" Load Basic Settings:
runtime vimrc-minimal

" Add Dotfiles After To RTP:
set runtimepath+=~/dotfiles/conf/vim/after/

" Set Spellfile Location:
set spellfile=~/dotfiles/conf/vim/spell/en.utf-8.add

" Statusline:
function! SL_WC() abort
	return &filetype =~# '\v^(markdown|txt|vimwiki)' ? ' W:' . wordcount().words : ''
endfunction
lua << EOF
function sl_dg()
	local d = ''
	for kind,marker in pairs({ Error = " E:", Warning = " W:", Information = " I:", Hint = " H:" }) do
		local c = vim.lsp.diagnostic.get_count(0, kind)
		if c ~= 0 then
			d = d .. marker .. tostring(c)
		end
	end
	return d
end
EOF
let s:statusline = ' %0.45f%m%h%w%r%= %y%{SL_WC()} %l:%c%{luaeval("sl_dg()")} '
let s:statusline_nc = ' %0.45f%m%h%w%r%='
function! SL_STL() abort
	return g:statusline_winid ==# win_getid() ? s:statusline : s:statusline_nc
endfunction
set statusline=%!SL_STL()

" Use g@ to capitalize words:
set operatorfunc=dotfiles#titlecase
" }}}
" Mac NeoVim Settings: {{{
if has('mac') && has('nvim')
	let g:python_host_prog='/usr/bin/python2.7'
	let g:python3_host_prog='/usr/local/bin/python3'
	let g:ruby_host_prog=expand('~/.asdf/shims/neovim-ruby-host')
	let g:node_host_prog='/usr/local/lib/node_modules/neovim/bin/cli.js'
	" This is macOS only, I believe, but it fixes slow start-up for clipboard:
	let g:clipboard = {
	\ 'copy': {'+': 'pbcopy', '*': 'pbcopy'},
	\ 'paste': {'+': 'pbpaste', '*': 'pbpaste'},
	\ 'name': 'pbcopy', 'cache_enabled': 0
	\ }
endif
" }}}
" Autogroups {{{
augroup dotfiles-settings
	autocmd!
augroup END
augroup plug-settings
	autocmd!
augroup END
" }}}
" Tabs: {{{
set tabstop=4
set shiftwidth=4
set softtabstop=4
set noexpandtab
" }}}
" Folds: {{{
set foldmethod=syntax
autocmd dotfiles-settings FileType vim setlocal foldmethod=marker foldlevel=0
autocmd dotfiles-settings FileType css setlocal foldmethod=syntax foldlevel=0
autocmd dotfiles-settings FileType scss setlocal foldmethod=syntax foldlevel=0
autocmd dotfiles-settings FileType python setlocal foldmethod=indent
autocmd dotfiles-settings FileType diff setlocal nofoldenable
" }}}
" Plugins: {{{
lua require("dotfiles.packer")
" }}}
" Maps: {{{
let g:enable_todo = v:true
" Highlight a block and type "@" to run a macro on the block:
xnoremap <silent> @ :<C-u>call visualat#execute_macro_over_visual_range()<CR>

" Grep project:
function s:grep_or_qfgrep()
	if &buftype ==# 'quickfix'
		let l:input = input('QFGrep/')
		if len(l:input) > 0
			execute 'Cfilter /'.l:input.'/'
		endif
	else
		let l:input = input('Grep/')
		if len(l:input) > 0
			execute 'Grep ' . l:input
		endif
	endif 
endfunction
nnoremap <silent> <leader>/ <cmd>call <SID>grep_or_qfgrep()<CR>

" Calculator (not sure how this works):
inoremap <C-A> <C-O>yiW<End>=<C-R>=<C-R>0<CR>

" Shortcut to view current syntax highlighting group:
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
	\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
	\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Jump out of a lexima pair with <C-l>:
inoremap <C-l> <C-r>=lexima#insmode#leave(1, "")<CR>

" List Bindings: {{{
nnoremap <silent> <leader>d :call dotfiles#lists#toggle('Location List', 'l')<CR>
nnoremap <silent> <leader>q :call dotfiles#lists#toggle('Quickfix List', 'c')<CR>
"}}}
" Default Diagnostic Bindings: {{{
nmap <silent> <Plug>(dotfiles-diagnostic-next) <cmd>cnext<CR>
nmap <silent> <Plug>(dotfiles-diagnostic-previous) <cmd>cprev<CR>
" }}}
" Standard Fuzzy Bindings: {{{
nmap <silent> <c-p> <Plug>(dotfiles-files)
nmap <silent> <leader>F <Plug>(dotfiles-home-files)
nmap <silent> <leader>a <Plug>(dotfiles-buffers)
nmap <silent> <leader>A <Plug>(dotfiles-windows)
nmap <silent> <leader>l <Plug>(dotfiles-lines)
nmap <silent> <leader>? <Plug>(dotfiles-commands)
" }}}
" Standard LSP Bindings: {{{
" As with Fuzzy bindings (above), we set all the LSP commands to Plug
" bindings and then rebind them here to the keys we actually want to use:
nmap <silent> <F2>		<Plug>(dotfiles-rename)
nmap <silent> <F5>		<Plug>(dotfiles-commands)
vmap <silent> ga		<Plug>(dotfiles-codeaction-selected)
nmap <silent> ga		<Plug>(dotfiles-codeaction)
nmap <silent> gl		<Plug>(dotfiles-codelens)
nmap <silent> gd		<Plug>(dotfiles-definition)
nmap <silent> gy		<Plug>(dotfiles-type-definition)
nmap <silent> gi		<Plug>(dotfiles-implementation)
nmap <silent> gr		<Plug>(dotfiles-references)
nmap <silent> <leader>s <Plug>(dotfiles-document-symbols)
nmap <silent> K			<Plug>(dotfiles-documentation)
nmap <silent> [d		<Plug>(dotfiles-diagnostic-previous)
nmap <silent> ]d		<Plug>(dotfiles-diagnostic-next)
" }}}
" }}}
" Theme: {{{
set background=dark

if exists('+termguicolors')
	let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
	let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
	set termguicolors
	packadd nvim-colorizer.lua
	lua require'colorizer'.setup{'*',markdown={names=false},text={names=false}}
endif

let s:wal_cache = expand(($XDG_CACHE_HOME ? $XDG_CACHE_HOME : $HOME.'/.cache') . '/wal/vim')
if isdirectory(s:wal_cache)
	exe 'set runtimepath+='.s:wal_cache
	colorscheme wal
else
	colorscheme default
endif
" }}}
" Other Settings: {{{

" Highlighted Yank:
autocmd plug-settings TextYankPost * silent! lua vim.highlight.on_yank {higroup="IncSearch", timeout=500}

" Treesitter:

" Close Preview Window:
autocmd dotfiles-settings CompleteDone * if pumvisible() == 0 | pclose | endif

" On opening a file, jump to the last known cursor position (see :h line())
autocmd dotfiles-settings BufReadPost *
\ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit' |
\	 exe "normal! g`\"" |
\ endif 

" Fix window resizing
autocmd dotfiles-settings VimEnter * silent exec "!kill -s SIGWINCH $PPID"

" Update FASD For NeoVim: {{{
function! s:fasd_update() abort
	if empty(&buftype)
		call jobstart(['fasd', '-A', expand('%:p')])
	endif
endfunction
autocmd dotfiles-settings BufWinEnter,BufFilePost * call s:fasd_update()
" }}}
" }}}
" # vim:foldmethod=marker
