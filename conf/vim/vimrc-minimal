" Make sure dotfiles are added to RTP, if not already added:
if !empty(glob('~/dotfiles/conf/vim/')) && !(&runtimepath =~# expand('~/dotfiles/conf/vim/'))
  set runtimepath+=~/dotfiles/conf/vim/
endif
" ==============================================================================
" Basic Settings:
" ==============================================================================
set visualbell t_vb= " Disable visual bell
set autowrite " Autosave files
set hidden " turn off buffer saving when switching
set lazyredraw " Don't redraw between macro runs (may make terminal flicker)

" Override Default Split Creation Locations:
set splitbelow
set splitright

" Line Numbering:
set number relativenumber

" This avoids highlighting big files:
let g:large_file = 20*1024*1024

" Set Leader:
let mapleader = "\<Space>"
let maplocalleader = ','

augroup minimal-vimrc
  autocmd!
augroup END

if has('nvim')
  " Preview Substitution Operations:
  set inccommand=split

  " Turn Off Line Numbering:
  autocmd minimal-vimrc TermOpen * setlocal nonumber norelativenumber
endif

" Height Of The Preview Window:
let &previewheight = 14

" Completion:
set completeopt=menuone,noselect,noinsert,preview
" Shut off completion messages
set shortmess+=c
" prevent a condition where vim lags due to searching include files.
set complete-=i

" <C-z> expands wildcards in command mode
set wildcharm=<C-z>

" Line Number Colors:
autocmd minimal-vimrc ColorScheme * hi LineNr ctermfg=7
autocmd minimal-vimrc ColorScheme * hi LineNrAbove ctermfg=7
autocmd minimal-vimrc ColorScheme * hi LineNrBelow ctermfg=7

" ==============================================================================
" Basic Maps:
" ==============================================================================
" Select Whole File:
nnoremap <leader>vf ggVG
" Clear Currently Highlighted Regexp:
nnoremap <silent> <leader>cr :let<C-u>let @/=""<CR>
" Navigate Quickfix:
nnoremap <silent> ]q <cmd>cnext<CR>
nnoremap <silent> [q <cmd>cprevious<CR>
" Navigate Buffers:
nnoremap <silent> ]b <cmd>bnext<CR>
nnoremap <silent> [b <cmd>bprevious<CR>

" Source https://github.com/romainl/minivimrc/blob/master/vimrc
" Minimal File Finding:
nnoremap <localleader>f :find *
nnoremap <localleader>s :sfind *
nnoremap <localleader>v :vert sfind *
" Minimal Buffer Jumping:
nnoremap <localleader>b :buffer *
nnoremap <localleader>B :sbuffer *

" ==============================================================================
" Minpac For Essentials:
" ==============================================================================
function! s:packpath() abort
  return (has('nvim') ? stdpath('data') . '/site' : expand('~/.vim'))
endfunction

function! PackInit() abort
  " Download Minpac:
  let l:minpac_dir = s:packpath()
  if empty(glob(l:minpac_dir.'/pack/minpac/opt/minpac'))
    if executable('git')
      silent execute '!git clone --depth 1 https://github.com/k-takata/minpac "'.l:minpac_dir.'/pack/minpac/opt/minpac"'
    endif
  endif

  " Load Minpac:
  packadd minpac

  if exists('g:loaded_minpac')
    call minpac#init({'dir': l:minpac_dir})

    call minpac#add('k-takata/minpac', {'type': 'opt'})
    call minpac#add('tpope/vim-sensible') " Agreeable vim settings:
    call minpac#add('xero/securemodelines') " Secure modelines
    call minpac#add('tpope/vim-commentary') " Comment w/ gcc or gc (visual)
    call minpac#add('oncomouse/vim-grep') " :Grep and :LGrep
    call minpac#add('noahfrederick/vim-neovim-defaults') " Set Vim with the same default as NeoVim
  else
    echoerr "Could not load minpac. Perhaps your Internet is not working or you don't have git?"
  endif
endfunction

command! PackUpdate call PackInit() | call minpac#update()
command! PackClean call PackInit() | call minpac#clean()
command! PackStatus call PackInit() | call minpac#status()

" ==============================================================================
" Pack Settings:
" ==============================================================================
set nomodeline
let g:secure_modelines_verbose = 0
let g:secure_modelines_modelines = 15
let g:secure_modelines_allowed_items = [
\ 'textwidth',   'tw',
\ 'softtabstop', 'sts',
\ 'tabstop',     'ts',
\ 'shiftwidth',  'sw',
\ 'expandtab',   'et',   'noexpandtab', 'noet',
\ 'filetype',    'ft',
\ 'foldmethod',  'fdm',
\ 'foldlevel',   'fdl',
\ 'readonly',    'ro',   'noreadonly', 'noro',
\ 'rightleft',   'rl',   'norightleft', 'norl',
\ 'cindent',     'cin',  'nocindent', 'nocin',
\ 'smartindent', 'si',   'nosmartindent', 'nosi',
\ 'autoindent',  'ai',   'noautoindent', 'noai',
\ 'spell', 'nospell',
\ 'spelllang',
\ 'wrap', 'nowrap',
\ 'syntax'
\ ]
if has('nvim')
  let g:loaded_neovim_defaults = 1
endif
