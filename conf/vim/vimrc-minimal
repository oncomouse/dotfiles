" ==============================================================================
" Basic Settings:
" ==============================================================================
set visualbell t_vb= " Disable visual bell
set autowrite " Autosave files
set hidden " turn off buffer saving when switching
set lazyredraw " Don't redraw between macro runs (may make terminal flicker)

" Override Default Split Creation Locations:
set splitbelow
set splitright

" Line Numbering:
set number relativenumber

" Folds:
set foldlevel=99
set foldmethod=manual

" Avoid Highlighting Large Files:
let g:large_file = 20*1024*1024

" Set Leader:
let mapleader = "\<Space>"
let maplocalleader = ','

if has('nvim')
	" Preview Substitution Operations:
	set inccommand=split
endif

" Height Of The Preview Window:
set previewheight=14

" Completion:
set completeopt=menuone,noselect,noinsert,preview
set shortmess+=c
" prevent a condition where vim lags due to searching include files.
set complete-=i

" <C-z> expands wildcards in command mode
set wildcharm=<C-z>
" Set path to current file direction and pwd:
set path=.,,

if executable('rg')
	set grepprg=rg\ --vimgrep
	set grepformat=%f:%l:%c:%m
elseif executable('ag')
	set grepprg=ag\ --vimgrep
	set grepformat=%f:%l:%c:%m
else
	set grepprg=grep\ -rn
endif

" Minimal Statusbar:
set statusline=\ %0.45f%m%h%w%r%=\ %y\ %l:%c\ 

set wrapscan

" Mouse And Clipboard:
set mouse=a " Mouse support
if has('clipboard')
	if has('unnamedplus')
		set clipboard=unnamedplus,unnamed
	else
		set clipboard=unnamed
	endif
endif

set dictionary=/usr/share/dict/words

" Default to hashtag-style comments, by default:
set commentstring=#\ %s
" ==============================================================================
" Disable Plugins:
" ==============================================================================
let g:loaded_gzip = 1
let g:loaded_tarPlugin = 1
let g:loaded_zipPlugin = 1
let g:loaded_2html_plugin = 1
let g:loaded_rrhelper = 1
let g:loaded_remote_plugins = 1
" let g:loaded_netrw = 1
" let g:loaded_netrwPlugin = 1
" ==============================================================================
" Autocommands:
" ==============================================================================
augroup minimal-vimrc
	autocmd!
augroup END

" Line Number Colors:
autocmd minimal-vimrc ColorScheme default hi LineNr ctermfg=7
autocmd minimal-vimrc ColorScheme default hi LineNrAbove ctermfg=7
autocmd minimal-vimrc ColorScheme default hi LineNrBelow ctermfg=7
autocmd minimal-vimrc ColorScheme default hi StatusLine ctermbg=8 ctermfg=7 cterm=NONE
autocmd minimal-vimrc ColorScheme default hi StatusLineNC ctermbg=8 ctermfg=240 cterm=NONE

" Turn Off Line Numbering:
if has('nvim')
	autocmd minimal-vimrc TermOpen * setlocal nonumber norelativenumber
endif

" Start QuickFix:
autocmd minimal-vimrc QuickFixCmdPost [^l]* call ListToggle('c', 1)
autocmd minimal-vimrc QuickFixCmdPost l*    call ListToggle('l', 1)
" ==============================================================================
" Basic Maps:
" ==============================================================================
" Select Whole File:
nnoremap <leader>vf ggVG

" Clear Currently Highlighted Regexp:
nnoremap <silent> <leader>cr :let<C-u>let @/=""<CR>

" Navigate Buffers:
nnoremap <silent> ]b <cmd>bnext<CR>
nnoremap <silent> [b <cmd>bprevious<CR>
" Jump to the alternate buffer:
nnoremap <silent> `` <cmd>e #<CR>

" Source https://github.com/romainl/minivimrc/blob/master/vimrc
" Minimal File Finding:
nnoremap <localleader>f :find *
nnoremap <localleader>s :sfind *
nnoremap <localleader>v :vert sfind *
" Minimal Buffer Jumping:
nnoremap <leader>a :buffers<CR>:buffer<Space> 
nnoremap <localleader>a :buffer *
nnoremap <localleader>A :sbuffer *

" Better Matching:
nnoremap [I [I:ijump<Space><Space><Space><C-r><C-w><S-Left><Left><Left>
nnoremap ]I ]I:ijump<Space><Space><Space><C-r><C-w><S-Left><Left><Left>

" Navigate Quickfix:
nnoremap <silent> ]q <cmd>cnext<CR>
nnoremap <silent> [q <cmd>cprevious<CR>

" Navigate Location List:
nnoremap <silent> ]d <cmd>lnext<CR>
nnoremap <silent> [d <cmd>lprev<CR>

" Toggle Quickfix:
nnoremap <silent> <leader>q <cmd>call ListToggle('c')<CR>
nnoremap <silent> <leader>d <cmd>call ListToggle('l')<CR>

" Project Grep:
nnoremap <silent> <leader>/ <cmd>call GrepOrQfGrep()<CR>
" ==============================================================================
" Commands:
" ==============================================================================
command! Diagnostics execute 'silent lmake! %' | if len(getloclist(0)) != 0 | execute 'lopen' | else | execute 'lclose' | endif
command! Format silent normal! mxgggqG`x<CR>

" Adjust Spacing:
command! -nargs=1 Spaces let b:wv = winsaveview() | execute "setlocal expandtab"	 | silent execute "%!expand -it "	. <args> . ""	 | call winrestview(b:wv) | setlocal ts? sw? sts? et?
command! -nargs=1 Tabs	 let b:wv = winsaveview() | execute "setlocal noexpandtab" | silent execute "%!unexpand -t " . <args> . "" | call winrestview(b:wv) | setlocal ts? sw? sts? et?
" ==============================================================================
" Functions:
" ==============================================================================

function! ListToggle(pfx, ...)
	let force_open = get(a:, 0, 0)
	if !force_open
		if get(g:, 'dotfiles_' . a:pfx . 'open', 0)
			let g:['dotfiles_' . a:pfx . 'open'] = 0
			exec(a:pfx.'close')
			return
		endif
		if a:pfx ==# 'l' && len(getloclist(0)) == 0
			echohl ErrorMsg
			echo 'Location List is Empty.'
			echohl NONE
			return
		endif
	endif
	let g:['dotfiles_' . a:pfx . 'open'] = 1
	exec(a:pfx.'open')
endfunction

function GrepOrQfGrep()
	if &buftype ==# 'quickfix'
		" Load cfilter in quickfix view:
		packadd cfilter
		let l:input = input('QFGrep/')
		if len(l:input) > 0
			let l:prefix = getwininfo(win_getid())[0].loclist ? 'L' : 'C'
			execute l:prefix . 'filter /'.l:input.'/'
		endif
	else
		let l:input = input('Grep/')
		if len(l:input) > 0
			execute 'silent! grep! "' . l:input . '"'
		endif
	endif 
endfunction
" ==============================================================================
" Minpac For Essentials:
" ==============================================================================
function! s:packpath() abort
	return ($XDG_DATA_HOME ? $XDG_DATA_HOME : $HOME.'/.local/share') . '/minpac/minimal'
endfunction

if !get(g:, 'skip_minimal_minpac', !has('patch-7.4.1384'))
	function! PackInit() abort
		" Download Minpac:
		let l:minpac_dir = s:packpath()
		if empty(glob(l:minpac_dir.'/pack/minpac/opt/minpac'))
			if executable('git')
				silent execute '!git clone --depth 1 https://github.com/k-takata/minpac "'.l:minpac_dir.'/pack/minpac/opt/minpac"'
			endif
		endif

		" Load Minpac:
		packadd minpac

		if exists('g:loaded_minpac')
			call minpac#init({'dir': l:minpac_dir})
			call minpac#add('tpope/vim-sensible', {'type': 'opt'}) " Agreeable vim settings:
			call minpac#add('xero/securemodelines', {'type': 'opt'}) " Secure modelines
			call minpac#add('tpope/vim-commentary') " gc to toggl commentst
			call minpac#add('vim-scripts/ReplaceWithRegister') " gr{motion} or grr or gr in visual to replace with register
			call minpac#add('k-takata/minpac', {'type': 'opt'})
			call minpac#add('noahfrederick/vim-neovim-defaults', {'type': 'opt'}) " Set Vim with the same default as NeoVim
		else
			echoerr "Could not load minpac. Perhaps your Internet is not working or you don't have git?"
		endif
	endfunction

	exe 'set packpath+='.s:packpath()
	command! PackUpdate call PackInit() | call minpac#update()
	command! PackClean call PackInit() | call minpac#clean()
	command! PackStatus call PackInit() | call minpac#status()
end

" ==============================================================================
" Pack Settings:
" ==============================================================================
if has('patch-7.4.1384') " packadd available
	if !has('patch-8.1.1365') && !has('nvim-0.4') " Securemodelines is needed:
		set nomodeline
		let g:secure_modelines_verbose = 0
		let g:secure_modelines_modelines = 15
		let g:secure_modelines_allowed_items = [
			\ 'textwidth',	 'tw',
			\ 'softtabstop', 'sts',
			\ 'tabstop',     'ts',
			\ 'shiftwidth',	 'sw',
			\ 'expandtab',	 'et',	 'noexpandtab', 'noet',
			\ 'filetype',    'ft',
			\ 'foldmethod',	 'fdm',
			\ 'foldlevel',	 'fdl',
			\ 'readonly',    'ro',	 'noreadonly', 'noro',
			\ 'rightleft',	 'rl',	 'norightleft', 'norl',
			\ 'cindent',     'cin',	 'nocindent', 'nocin',
			\ 'smartindent', 'si',	 'nosmartindent', 'nosi',
			\ 'autoindent',	 'ai',	 'noautoindent', 'noai',
			\ 'spell',       'nospell',
			\ 'spelllang',
			\ 'wrap',        'nowrap',
			\ 'syntax'
			\ ]
		packadd! securemodelines
	endif
	if !has('nvim') " Not using Neovim:
		packadd! vim-sensible
		packadd! vim-neovim-defaults
	endif
	if !exists('g:skip_minimal_minpac')
		colorscheme default
	endif
endif

" ==============================================================================
" FZF:
" ==============================================================================
if isdirectory('/usr/local/opt/fzf') " Homebrew
	set runtimepath+=/usr/local/opt/fzf
	let g:has_fzf = 1
elseif isdirectory('/usr/share/vim/vimfiles') " Arch, btw
	set runtimepath+=/usr/share/vim/vimfiles
	let g:has_fzf = 1
elseif isdirectory('~/.fzf') " Local install
	set runtimepath+=~/.fzf
	let g:has_fzf = 1
end
let g:fzf_layout = { 'window': { 'width': 1, 'height': 0.4, 'yoffset': 1, 'border': 'top' } }
let g:fzf_action = {
	\ 'ctrl-s': 'split',
	\ 'ctrl-v': 'vsplit',
	\ 'ctrl-t': 'tabnew',
	\ 'ctrl-e': 'edit',
	\ }
let g:fzf_nvim_statusline = 0
if !exists('g:skip_minimal_minpac')
	let g:fzf_colors =
		\ { 'fg':      ['fg', 'Normal'],
		\   'bg':      ['bg', 'Normal'],
		\   'hl':      ['fg', 'Comment'],
		\   'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
		\   'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
		\   'hl+':     ['fg', 'Statement'],
		\   'info':    ['fg', 'PreProc'],
		\   'border':  ['fg', 'Ignore'],
		\   'prompt':  ['fg', 'Conditional'],
		\   'pointer': ['fg', 'Exception'],
		\   'marker':  ['fg', 'Keyword'],
		\   'spinner': ['fg', 'Label'],
		\   'header':  ['fg', 'Comment'] }
endif
if get(g:, 'has_fzf', 0)
	nmap <silent> <C-P> <cmd>FZF --reverse --info=inline<cr>
endif
" vim:ft=vim
