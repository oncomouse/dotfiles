" Make sure dotfiles are added to RTP, if not already added:
if !empty(glob('~/dotfiles/conf/vim/')) && !(&runtimepath =~# expand('~/dotfiles/conf/vim/'))
	set runtimepath+=~/dotfiles/conf/vim/
endif
" ==============================================================================
" Basic Settings:
" ==============================================================================
set visualbell t_vb= " Disable visual bell
set autowrite " Autosave files
set hidden " turn off buffer saving when switching
set lazyredraw " Don't redraw between macro runs (may make terminal flicker)

" Override Default Split Creation Locations:
set splitbelow
set splitright

" Line Numbering:
set number relativenumber

" Folds:
set foldlevel=99
set foldmethod=indent

" This avoids highlighting big files:
let g:large_file = 20*1024*1024

" Set Leader:
let mapleader = "\<Space>"
let maplocalleader = ','

augroup minimal-vimrc
	autocmd!
augroup END

if has('nvim')
	" Preview Substitution Operations:
	set inccommand=split

	" Turn Off Line Numbering:
	autocmd minimal-vimrc TermOpen * setlocal nonumber norelativenumber
endif

" Height Of The Preview Window:
let &previewheight = 14

" Completion:
set completeopt=menuone,noselect,noinsert,preview
" Shut off completion messages
set shortmess+=c
" prevent a condition where vim lags due to searching include files.
set complete-=i

" <C-z> expands wildcards in command mode
set wildcharm=<C-z>
" Set path to current file direction and pwd:
set path=.,,

" Mouse And Clipboard:
set mouse=a " Mouse support
if has('clipboard')
	if has('unnamedplus')
		set clipboard=unnamedplus,unnamed
	else
		set clipboard=unnamed
	endif
endif

" ==============================================================================
" Basic Maps:
" ==============================================================================
" Select Whole File:
nnoremap <leader>vf ggVG
" Clear Currently Highlighted Regexp:
nnoremap <silent> <leader>cr :let<C-u>let @/=""<CR>
" Navigate Quickfix:
nnoremap <silent> ]q <cmd>cnext<CR>
nnoremap <silent> [q <cmd>cprevious<CR>
" Navigate Buffers:
nnoremap <silent> ]b <cmd>bnext<CR>
nnoremap <silent> [b <cmd>bprevious<CR>

" Source https://github.com/romainl/minivimrc/blob/master/vimrc
" Minimal File Finding:
nnoremap <localleader>f :find *
nnoremap <localleader>s :sfind *
nnoremap <localleader>v :vert sfind *
" Minimal Buffer Jumping:
nnoremap <localleader>b :buffer *
nnoremap <localleader>B :sbuffer *
" Completion Mappings:
" Search previous words:
inoremap <buffer> <localleader>, <C-x><C-n><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
" Search file names:
inoremap <buffer> <localleader>: <C-x><C-f><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
" Search previous lines:
inoremap <buffer> <localleader>= <C-x><C-l><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
" commands for adjusting indentation rules manually
command! -nargs=1 Spaces let b:wv = winsaveview() | execute "setlocal expandtab"   | silent execute "%!expand -it "	. <args> . ""  | call winrestview(b:wv) | setlocal ts? sw? sts? et?
command! -nargs=1 Tabs	 let b:wv = winsaveview() | execute "setlocal noexpandtab" | silent execute "%!unexpand -t " . <args> . "" | call winrestview(b:wv) | setlocal ts? sw? sts? et?


" <nop> those bindings for writing files:
autocmd minimal-vimrc FileType markdown,text,mail silent! iunmap <buffer> <localleader>,
autocmd minimal-vimrc FileType markdown,text,mail silent! iunmap <buffer> <localleader>:
autocmd minimal-vimrc FileType markdown,text,mail silent! iunmap <buffer> <localleader>=

" Better Matching:
nnoremap [I [I:ijump<Space><Space><Space><C-r><C-w><S-Left><Left><Left>
nnoremap ]I ]I:ijump<Space><Space><Space><C-r><C-w><S-Left><Left><Left>
"
" Line Number Colors:
autocmd minimal-vimrc ColorScheme default hi LineNr ctermfg=7
autocmd minimal-vimrc ColorScheme default hi LineNrAbove ctermfg=7
autocmd minimal-vimrc ColorScheme default hi LineNrBelow ctermfg=7
autocmd minimal-vimrc ColorScheme default hi StatusLine ctermbg=8 ctermfg=7 cterm=bold
autocmd minimal-vimrc ColorScheme default hi StatusLineNC ctermbg=8 ctermfg=7 cterm=NONE

" Minimal Statusbar:
" source: https://github.com/darioisthebest/dotfiles/blob/master/nvim/init.vim#L126
set statusline=%0.45f%m%r%h%w\ %=LN\ %l\/%L\ C\ %c%V\ %P\ \%y

" ==============================================================================
" Minpac For Essentials:
" ==============================================================================
function! s:packpath() abort
	return ($XDG_DATA_HOME ? $XDG_DATA_HOME : $HOME.'/.local/share') . '/minpac/minimal'
	" return (has('nvim') ? stdpath('data') . '/site' : expand('~/.vim'))
endfunction

function! MinimalMinPac() abort
	call minpac#add('tpope/vim-sensible') " Agreeable vim settings:
	call minpac#add('xero/securemodelines') " Secure modelines
	call minpac#add('oncomouse/vim-grep') " :Grep and :LGrep
	call minpac#add('tpope/vim-commentary')
endfunction

if !get(g:, 'skip_minimal_minpac', !has('patch-7.4.1384'))
	function! PackInit() abort
		" Download Minpac:
		let l:minpac_dir = s:packpath()
		if empty(glob(l:minpac_dir.'/pack/minpac/opt/minpac'))
			if executable('git')
				silent execute '!git clone --depth 1 https://github.com/k-takata/minpac "'.l:minpac_dir.'/pack/minpac/opt/minpac"'
			endif
		endif

		" Load Minpac:
		packadd minpac

		if exists('g:loaded_minpac')
			call minpac#init({'dir': l:minpac_dir})
			call MinimalMinPac()
			call minpac#add('k-takata/minpac', {'type': 'opt'})
			call minpac#add('noahfrederick/vim-neovim-defaults', {'type': 'opt'}) " Set Vim with the same default as NeoVim
		else
			echoerr "Could not load minpac. Perhaps your Internet is not working or you don't have git?"
		endif
	endfunction

	exe 'set packpath+='.s:packpath()
	command! PackUpdate call PackInit() | call minpac#update()
	command! PackClean call PackInit() | call minpac#clean()
	command! PackStatus call PackInit() | call minpac#status()
end

" ==============================================================================
" Pack Settings:
" ==============================================================================
if has('patch-7.4.1384')
	set nomodeline
	let g:secure_modelines_verbose = 0
	let g:secure_modelines_modelines = 15
	let g:secure_modelines_allowed_items = [
		\ 'textwidth',	 'tw',
		\ 'softtabstop', 'sts',
		\ 'tabstop',		 'ts',
		\ 'shiftwidth',	 'sw',
		\ 'expandtab',	 'et',	 'noexpandtab', 'noet',
		\ 'filetype',		 'ft',
		\ 'foldmethod',	 'fdm',
		\ 'foldlevel',	 'fdl',
		\ 'readonly',		 'ro',	 'noreadonly', 'noro',
		\ 'rightleft',	 'rl',	 'norightleft', 'norl',
		\ 'cindent',		 'cin',	 'nocindent', 'nocin',
		\ 'smartindent', 'si',	 'nosmartindent', 'nosi',
		\ 'autoindent',	 'ai',	 'noautoindent', 'noai',
		\ 'spell', 'nospell',
		\ 'spelllang',
		\ 'wrap', 'nowrap',
		\ 'syntax'
		\ ]
	if !has('nvim')
		packadd! vim-neovim-defaults
	endif
	if !exists('g:dotfiles_mode')
		colorscheme default
	endif
endif
