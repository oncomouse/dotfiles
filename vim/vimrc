scriptencoding utf8

if has('mac') && has('nvim')
  let g:python_host_prog='/usr/bin/python2.7'
  let g:python3_host_prog='/usr/local/bin/python3'
  let g:ruby_host_prog=expand('~/.asdf/shims/neovim-ruby-host')
  let g:node_host_prog='/usr/local/lib/node_modules/neovim/bin/cli.js'
  " This is macOS only, I believe, but it fixes slow start-up for clipboard:
  let g:clipboard = {
        \'copy': {'+': 'pbcopy', '*': 'pbcopy'},
        \'paste': {'+': 'pbpaste', '*': 'pbpaste'},
        \'name': 'pbcopy', 'cache_enabled': 0
        \}
endif

" Dotfiles Settings: {{{
let g:dotfiles_mode = get(g:, 'dotfiles_mode', 'server')
" fzf, clap, ale-coc.nvim, coc.nvim, or denite
let g:complete_package = 'fzf'
" Location of BiBLaTeX repo:
let g:bibliography_file = expand('~/Seafile/My Library/Documents/Academic Stuff/library.bib')
" This avoids highlighting big files:
let g:large_file = 20*1024*1024
" }}}

" Basic Vim settings:
set mouse=a " Mouse support
if has('clipboard')
  if has('unnamedplus')
    set clipboard=unnamedplus,unnamed
  else
    set clipboard=unnamed
  endif
endif
set visualbell t_vb= " Disable visual bell
set autowrite " Autosave files
set hidden " turn off buffer saving when switching
set lazyredraw " Don't redraw between macro runs (may make terminal flicker)

" Set default tabs:
set tabstop=8
set shiftwidth=2
set softtabstop=2
set expandtab
" Override default tabs: {{{
  augroup my-tabstops
    autocmd!
    " Go, Lua
    autocmd FileType markdown,go,lua setlocal tabstop=4
    autocmd FileType markdown,go,lua setlocal shiftwidth=4
    autocmd FileType markdown,go,lua setlocal noexpandtab
    " JavaScript
    autocmd FileType javascript,javascriptreact setlocal tabstop=2
    autocmd FileType javascript,javascriptreact setlocal shiftwidth=2
    autocmd FileType javascript,javascriptreact setlocal softtabstop=2
    autocmd FileType javascript,javascriptreact setlocal expandtab
  augroup END
" }}}

" Set fold defaults:
if g:dotfiles_mode ==# 'server'
  set nofoldenable " no folding in server mode
else
  set foldmethod=syntax
  set foldlevel=99
endif

" Override default split creation locations:
set splitbelow
set splitright

" Set <leader>:
let mapleader = "\<Space>"

" Line Numbering:
set number relativenumber
if has('nvim')
  augroup line-numbers
    autocmd!
      autocmd TermOpen * setlocal nonumber norelativenumber
  augroup END
endif

" Height of the preview window, in lines:
let &previewheight = 14

" Link in dotfiles:
let &runtimepath .= ','.expand('~/dotfiles/vim/after/')

" Plug-ins: {{{
" Install vim_plug if it is missing:
if empty(glob('~/.vim/autoload/plug.vim'))
  silent execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  augroup vim_plug
    autocmd!
    autocmd VimEnter * PlugInstall | source $MYVIMRC
  augroup END
endif
call plug#begin('~/.vim/plugged/' . g:dotfiles_mode)
  " Let's Get Started: {{
    Plug 'tpope/vim-sensible' " Good settings
    Plug 'https://gitlab.com/protesilaos/tempus-themes-vim.git'
  " }}
  " General Editing Plugins: {{{
    Plug 'xero/securemodelines' " Secure modelines
    set nomodeline
    let g:secure_modelines_verbose = 0
    let g:secure_modelines_modelines = 15
    Plug 'sickill/vim-pasta' " Indentation-forward pasting
    Plug 'machakann/vim-sandwich' " Change surrounding chars, sa adds, sd delete, sr replaces
    Plug 'tpope/vim-repeat' " Repeat plugin commands
    Plug 'tpope/vim-commentary' " Comment w/ gcc or gc (visual)
    Plug 'airblade/vim-rooter' " Set project root
    let g:rooter_patterns = ['Rakefile', 'package.json', '.git/', 'Gemfile']
    Plug 'tpope/vim-endwise' " Add 'end' to the end of functions
    Plug 'wellle/targets.vim' " add next block n]) targets, plus words in commas (a,)
    Plug 'jiangmiao/auto-pairs' " Aggressive auto-pairing
    let g:AutoPairs = {'(':')', '[':']',"'":"'",'"':'"', '`':'`', '{': '}'}
    " ,'```':'```', '"""':'"""', "'''":"'''"})
    augroup autopair-enable
      autocmd!
      autocmd FileType markdown
        \ let b:AutoPairs = extend(g:AutoPairs, {'~~~':'~~~'})
    augroup END
    Plug 'machakann/vim-highlightedyank' " Highlights yank
  " }}}
  " Writing: {{{
    " Plug 'vimwiki/vimwiki'
    " let g:vimwiki_list = [{'path': '~/Seafile/Todo/Wiki',
    "                       \ 'syntax': 'markdown', 'ext': '.md',
    "                       \ 'index': 'Wiki'}]
    " let g:vimwiki_global_ext = 0
  " }}}
  " Tmux: {{{
    Plug 'christoomey/vim-tmux-navigator' " Navigate TMUX & Vim panes with the same command
  " }}}
  " Statusline: {{{
  Plug 'vim-airline/vim-airline'
  let g:airline_powerline_fonts = g:dotfiles_mode ==# 'desktop'
  let g:airline_skip_empty_sections = 1
  let g:airline#extensions#whitespace#enabled = 0
  let g:airline#extensions#ale#enabled = 1
  let g:airline_detect_spell = 0
  let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
  let g:airline_symbols = get(g:, 'airline_symbols', {})
  let g:airline_symbols.dirty= 'â€¦'
  let g:airline_symbols.linenr = ''
  let g:airline#extensions#ale#show_line_numbers = 0
  let g:airline#extensions#ale#error_symbol = g:dotfiles_mode ==# 'desktop' ? "\uf05e\u2003" : 'E: ' 
  let g:airline#extensions#ale#warning_symbol = g:dotfiles_mode ==# 'desktop' ? "\uf071\u2003" : 'W: '
  let g:airline#extensions#ale#checking_symbol = g:dotfiles_mode ==# 'desktop' ? "\uf110" : '...'
  " }}}
  " Git Support: {{{
    Plug 'lambdalisue/gina.vim' " :Gina status to schedule; :Gina commit to commit
  " }}}
  " List Support: {{{
    if g:complete_package ==# 'fzf'
      Plug (isdirectory('/usr/local/opt/fzf') ? '/usr/local/opt/fzf' : '~/.fzf')
      Plug 'junegunn/fzf.vim' " Add shorcuts for FZF
    endif
  " }}}
  if g:dotfiles_mode ==# 'desktop'
    " General Editing: {{{
      Plug 'ncm2/float-preview.nvim' " Floating preview window
      Plug 'norcalli/nvim-colorizer.lua' " HTML codes and HTML color words to colors
      Plug 'alvan/vim-closetag' " Automatically close HTML tags
      let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.php,*.js,*.erb'
      let g:closetag_xhtml_filenames = '*.xhtml,*.js,*.erb'
      let g:closetag_filetypes = 'html,markdown,javascriptreact'
      let g:closetag_close_shortcut = '<leader>>'
      let g:closetag_regions = {
        \ 'typescriptreact': 'jsxRegion,tsxRegion',
        \ 'javascriptreact': 'jsxRegion',
        \ 'javascript': 'jsxRegion',
        \ }
      Plug 'Konfekt/FastFold' " Better fold support
      let g:fastfold_savehook = 1
      let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C', 'r', 'R', 'm', 'M']
      let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
      let g:fastfold_minlines = 0
      Plug 'Yggdroot/indentLine' " Indent with characters
      let g:indentLine_setColors = 1
      let g:indentLine_char = "\u22EE"
      let g:indentLine_color_term = 11
    " }}}
    " Syntax: {{{
      Plug 'neoclide/vim-jsx-improve'
      Plug 'plasticboy/vim-markdown'
      let g:vim_markdown_frontmatter = 1 " Format YAML
      let g:vim_markdown_strikethrough = 0 " Don't format strikethrough
      let g:vim_markdown_conceal = 0 " Don't conceal
      let g:vim_markdown_conceal_code_blocks = 0 " Don't conceal code blocks
      let g:vim_markdown_math = 1 " Do process MathJaX and LaTeX math
      Plug 'cakebaker/scss-syntax.vim'
      Plug 'oncomouse/vim-fish' " Async vim-fish
      Plug 'elzr/vim-json'
      let g:vim_json_syntax_conceal = 0
      Plug 'tbastos/vim-lua' " For Lua
      Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'} " For Python
    " }}}
    " Text Object Plugins: {{{
      Plug 'kana/vim-textobj-user' " Allow custom textobj definitions
      Plug 'kana/vim-textobj-function' " af, if, aF, iF select function
      Plug 'thinca/vim-textobj-function-javascript' " js function support
      Plug 'haya14busa/vim-textobj-function-syntax' " syntax-based function support
      Plug 'coderifous/textobj-word-column.vim' " ic, ac, aC, iC column selections
    " }}}
    " Autocomplete: {{{
      " Need NeoYank for some lists to implement yank history:
      if g:complete_package ==# 'denite' || g:complete_package ==# 'fzf'
        Plug 'Shougo/neoyank.vim'
      endif
      " Load a list manager:
      if g:complete_package ==# 'clap'
        Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
      elseif g:complete_package ==# 'fzf'
        Plug 'oncomouse/fzf-neoyank' " Add Yank shortcut
      elseif g:complete_package ==# 'denite'
        Plug 'Shougo/denite.nvim', { 'do' : ':UpdateRemotePlugins' }
        Plug 'neoclide/denite-extra' " Adds location_list and quickfix_list as denite sources
      endif
      " Load LSP + Completion:
      if g:complete_package =~# 'coc.nvim'
        Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
      else
        Plug 'autozimu/LanguageClient-neovim', {
        \ 'branch': 'next',
        \ 'do': 'bash install.sh',
        \ }
        " ncm2 for completion:
        Plug 'roxma/nvim-yarp'
        Plug 'ncm2/ncm2'
        Plug 'Shougo/neco-vim'
        Plug 'ncm2/ncm2-vim'
        Plug 'ncm2/ncm2-bufword'
        Plug 'ncm2/ncm2-path'
        Plug 'oncomouse/ncm2-biblatex'
      endif
      " ALE for linting:
      if complete_package !=# 'coc.nvim'
        Plug 'dense-analysis/ale'
      endif
      Plug 'wellle/tmux-complete.vim' " Adds TMUX buffers as a completion source
    " }}}
    " Writing: {{{
      Plug 'godlygeek/tabular' " :Tabular /| to auto-align tables (also :TableFormat in markdown)
      Plug 'reedes/vim-textobj-sentence' " Use as & is for selecting sentences; g) and g( for moving
    " }}}
  endif
call plug#end()
" }}}
" Modular Configuration Files: {{{
let configs = [
  \ 'theme',
\]
if g:dotfiles_mode ==# 'desktop'
  let configs = configs + [
    \ 'todo',
    \ 'writing',
  \]
endif
for file in configs
  execute 'runtime config/'.file.'.vim'
endfor
" }}}
" Yanking:
if has('nvim')
  set inccommand=split
endif
" Maps & Abbreviations {{{
  " Shortcut to view current syntax highlighting group:
  map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
    \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
    \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
  " Select whole file
  nnoremap <leader>vf ggVG
  " Clear currently highlighted regexp:
  nnoremap <silent> <leader>cr :let<C-u>let @/=""<CR>
  " Highlight a block and type "@" to run a macro on the block:
  xnoremap <silent> @ :<C-u>call visualat#ExecuteMacroOverVisualRange()<CR>
  " Update fast folds:
  nmap zuz <Plug>(FastFoldUpdate)
  " Fuzzy search bindings: {{{
    " Every list source we could implement (see g:complete_package) implements
    " these commmands, so I can use CoC or clap and they implement the FZF
    " interface. This unifies the list management:
    nnoremap <silent> <c-p> :Files<CR>
    nnoremap <silent> <leader>F :Files ~<CR>
    nnoremap <silent> <leader>q :QuickfixList<CR>
    nnoremap <silent> <leader>d :LocationList<CR>
    nnoremap <silent> <leader>a :Buffers<CR>
    nnoremap <silent> <leader>A :Windows<CR>
    nnoremap <silent> <leader>l :BLines<CR>
    nnoremap <silent> <leader>? :History<CR>
    nnoremap <silent> <leader>/ :execute 'Rg ' . input('Rg/')<CR>
    nnoremap <silent> <leader>y :Yanks<CR>
    nnoremap <silent> <leader>s :Symbols<CR>
  " }}}
" }}}
" Autocmds {{{
  augroup dotfile-autocmds
    autocmd!
    " On opening a file, jump to the last known cursor position (see :h line())
    autocmd BufReadPost *
          \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit' |
          \   exe "normal! g`\"" |
          \ endif 
  augroup END
  augroup custom-folds
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker foldlevel=0
    autocmd FileType css setlocal foldmethod=manual
    autocmd FileType diff setlocal nofoldenable
  augroup END
" }}}

" Load autocompletion: {{{
if g:dotfiles_mode ==# 'desktop'
  set completeopt-=preview
  " Debugger:
  if g:complete_package !=# 'coc.nvim'
    call dotfiles#autocomplete#ale#init()
  endif
  " List Management:
  call dotfiles#autocomplete#{substitute(g:complete_package, '[.-]', '_', 'g')}#init()
  " Language server and autocompletion:
  if g:complete_package =~# 'coc.nvim'
  else
    call dotfiles#autocomplete#ncm2#init()
    call dotfiles#autocomplete#LanguageClient#init()
  endif
  " Writing:
  if g:complete_package =~# 'coc.nvim'
    call dotfiles#autocomplete#coc_nvim#writing()
  else
    call dotfiles#autocomplete#ncm2#writing()
  endif
endif
" }}}
" Plug-in Configuration: {{{
  " vim-sandwich {{{
    let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)
    " sa<target>b adds Bold:
    let g:sandwich#recipes += [
          \{ 
          \ 'buns': ['**', '**'],
          \ 'filetype': ['markdown'],
          \ 'input': ['b'],
          \},
          \]
  " }}}
  " Gina {{{
  call gina#custom#command#option('status', '--opener', &previewheight . 'split')
  call gina#custom#command#option('commit', '--opener', &previewheight . 'split')
  call gina#custom#command#option('diff', '--opener', &previewheight . 'split')
  call gina#custom#command#option('status', '--group', 'short')
  call gina#custom#command#option('commit', '--group', 'short')
  call gina#custom#command#option('diff', '--group', 'short')
  " Implement vim-fugitive commands in Gina:
  call gina#custom#mapping#nmap('status', 'cc', ':<C-u>Gina commit<CR>', {'noremap': 1, 'silent': 1})
  " }}}
" }}}

" Update fasd for NeoVim:
if has('nvim')
  function! s:fasd_update() abort
    if empty(&buftype)
      call jobstart(['fasd', '-A', expand('%:p')])
    endif
  endfunction
  augroup fasd
    autocmd!
      autocmd BufWinEnter,BufFilePost * call s:fasd_update()
  augroup END
endif
if dotfiles_mode ==# 'server'
  let g:nerdfonts=0
  augroup dotfiles-server-au
    " Turn on CursorLine Highlighting on Insert:
    autocmd InsertEnter,InsertLeave * set cul!
  augroup END
endif
" # vim:foldmethod=marker
