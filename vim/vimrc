scriptencoding utf8
" In case this was loaded without a wrapper:
if !(&runtimepath =~# expand('~/dotfiles/vim/').',')
  let &runtimepath .= ','.expand('~/dotfiles/vim/')
endif

if has('mac') && has('nvim')
  let g:python_host_prog='/usr/bin/python2.7'
  let g:python3_host_prog='/usr/local/bin/python3'
  let g:ruby_host_prog=expand('~/.asdf/shims/neovim-ruby-host')
  let g:node_host_prog='/usr/local/lib/node_modules/neovim/bin/cli.js'
  " This is macOS only, I believe, but it fixes slow start-up for clipboard:
  let g:clipboard = {
        \'copy': {'+': 'pbcopy', '*': 'pbcopy'},
        \'paste': {'+': 'pbpaste', '*': 'pbpaste'},
        \'name': 'pbcopy', 'cache_enabled': 0
        \}
endif

" Dotfiles Settings: {{{
let g:dotfiles_mode = get(g:, 'dotfiles_mode', 'desktop')
" fzf, clap, ale-coc.nvim, coc.nvim, or denite
let g:complete_package = 'fzf'
" Location of BiBLaTeX repo:
let g:bibliography_file = expand('~/Seafile/My Library/Documents/Academic Stuff/library.bib')
" This avoids highlighting big files:
let g:large_file = 20*1024*1024
" }}}

" Basic Vim settings:
set mouse=a " Mouse support
if has('clipboard')
  if has('unnamedplus')
    set clipboard=unnamedplus,unnamed
  else
    set clipboard=unnamed
  endif
endif
set visualbell t_vb= " Disable visual bell
set autowrite " Autosave files
set hidden " turn off buffer saving when switching
set lazyredraw " Don't redraw between macro runs (may make terminal flicker)

" Set default tabs:
set tabstop=8
set shiftwidth=2
set softtabstop=2
set expandtab
" Override default tabs: {{{
  augroup my-tabstops
    autocmd!
    " Go, Lua
    autocmd FileType markdown,go,lua setlocal tabstop=4
    autocmd FileType markdown,go,lua setlocal shiftwidth=4
    autocmd FileType markdown,go,lua setlocal noexpandtab
    " JavaScript
    autocmd FileType javascript,javascriptreact setlocal tabstop=2
    autocmd FileType javascript,javascriptreact setlocal shiftwidth=2
    autocmd FileType javascript,javascriptreact setlocal softtabstop=2
    autocmd FileType javascript,javascriptreact setlocal expandtab
  augroup END
" }}}

" Set fold defaults:
if has('nvim-0.5')
  set foldmethod=expr
  set foldexpr=nvim_treesitter#foldexpr()
else
  if g:dotfiles_mode ==# 'server'
    set nofoldenable " no folding in server mode
  else
    set foldmethod=syntax
    set foldlevel=99
    augroup custom-folds
      autocmd!
      autocmd FileType vim setlocal foldmethod=marker foldlevel=0
      autocmd FileType css setlocal foldmethod=manual
      autocmd FileType diff setlocal nofoldenable
    augroup END
  endif
endif

" Override default split creation locations:
set splitbelow
set splitright

" Set <leader>:
let mapleader = "\<Space>"

" Line Numbering:
set number relativenumber
if has('nvim')
  augroup line-numbers
    autocmd!
      autocmd TermOpen * setlocal nonumber norelativenumber
  augroup END
endif

" Height of the preview window, in lines:
let &previewheight = 14

" Link in dotfiles:
let &runtimepath .= ','.expand('~/dotfiles/vim/after/')

" Show Updates Of Commands
if has('nvim')
  set inccommand=split
endif

" Plug-ins: {{{
" Install vim_plug if it is missing:
if empty(glob('~/.vim/autoload/plug.vim'))
  silent execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  augroup vim_plug
    autocmd!
    autocmd VimEnter * PlugInstall | source $MYVIMRC
  augroup END
endif
call plug#begin('~/.vim/plugged/' . g:dotfiles_mode)
  " NeoVim 0.5 stuff: {{{
    if has('nvim-0.5')
      Plug 'nvim-treesitter/nvim-treesitter'
    end
  " }}}
  " Get Started: {{{
    Plug 'tpope/vim-sensible' " Good settings
    Plug 'https://gitlab.com/protesilaos/tempus-themes-vim.git'
  " }}}
  " General Editing: {{{
    Plug 'xero/securemodelines' " Secure modelines
    set nomodeline
    let g:secure_modelines_verbose = 0
    let g:secure_modelines_modelines = 15
    Plug 'sickill/vim-pasta' " Indentation-forward pasting
    Plug 'machakann/vim-sandwich' " Change surrounding chars, sa adds, sd delete, sr replaces
    function! s:load_sandwich() abort
      let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)
      " sa<target>b adds Bold:
      let g:sandwich#recipes += [
            \{ 
            \ 'buns': ['**', '**'],
            \ 'filetype': ['markdown'],
            \ 'input': ['b'],
            \},
            \]
    endfunction
    augroup sandwich-startup
      autocmd!
      autocmd VimEnter * call s:load_sandwich()
    augroup END
    Plug 'tpope/vim-repeat' " Repeat plugin commands
    Plug 'tpope/vim-commentary' " Comment w/ gcc or gc (visual)
    Plug 'airblade/vim-rooter' " Set project root
    let g:rooter_patterns = ['Rakefile', 'package.json', '.git/', 'Gemfile']
    Plug 'tpope/vim-endwise' " Add 'end' to the end of functions
    Plug 'wellle/targets.vim' " add next block n]) targets, plus words in commas (a,)
    Plug 'jiangmiao/auto-pairs' " Aggressive auto-pairing
    let g:AutoPairs = {'(':')', '[':']',"'":"'",'"':'"', '`':'`', '{': '}'}
    " ,'```':'```', '"""':'"""', "'''":"'''"})
    augroup autopair-enable
      autocmd!
      autocmd FileType vim let b:AutoPairs = AutoPairsDefine({}, ['"'])
      autocmd FileType markdown
        \ let b:AutoPairs = extend(g:AutoPairs, {'~~~':'~~~'})
    augroup END
    Plug 'machakann/vim-highlightedyank' " Highlights yank
  " }}}
  " Writing: {{{
    " Plug 'vimwiki/vimwiki'
    " let g:vimwiki_list = [{'path': '~/Seafile/Todo/Wiki',
    "                       \ 'syntax': 'markdown', 'ext': '.md',
    "                       \ 'index': 'Wiki'}]
    " let g:vimwiki_global_ext = 0
  " }}}
  " Tmux: {{{
    " Navigate TMUX & Vim panes with the same command
    Plug 'christoomey/vim-tmux-navigator'
  " }}}
  " Git Support: {{{
    Plug 'lambdalisue/gina.vim' " :Gina status to schedule; :Gina commit to commit
    function! s:load_gina() abort
      call gina#custom#command#option('status', '--opener', &previewheight . 'split')
      call gina#custom#command#option('commit', '--opener', &previewheight . 'split')
      call gina#custom#command#option('diff', '--opener', &previewheight . 'split')
      call gina#custom#command#option('status', '--group', 'short')
      call gina#custom#command#option('commit', '--group', 'short')
      call gina#custom#command#option('diff', '--group', 'short')
      " Implement vim-fugitive commands in Gina:
      call gina#custom#mapping#nmap('status', 'cc', ':<C-u>Gina commit<CR>', {'noremap': 1, 'silent': 1})
    endfunction
    augroup gina-startup
      autocmd!
      autocmd VimEnter * call s:load_gina()
    augroup END
  " }}}
  " List Support: {{{
    if g:complete_package ==# 'fzf'
      Plug (isdirectory('/usr/local/opt/fzf') ? '/usr/local/opt/fzf' : '~/.fzf')
      Plug 'junegunn/fzf.vim' " Add shorcuts for FZF
    endif
  " }}}
  if g:dotfiles_mode ==# 'desktop'
    " General Editing: {{{
      Plug 'ncm2/float-preview.nvim' " Floating preview window
      if has('nvim')
        Plug 'norcalli/nvim-colorizer.lua' " HTML codes and HTML color words to colors
      endif
      Plug 'alvan/vim-closetag' " Automatically close HTML tags
      let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.php,*.js,*.erb'
      let g:closetag_xhtml_filenames = '*.xhtml,*.js,*.erb'
      let g:closetag_filetypes = 'html,markdown,javascriptreact'
      let g:closetag_close_shortcut = '<leader>>'
      let g:closetag_regions = {
        \ 'typescriptreact': 'jsxRegion,tsxRegion',
        \ 'javascriptreact': 'jsxRegion',
        \ 'javascript': 'jsxRegion',
        \ }
      Plug 'Konfekt/FastFold' " Better fold support
      let g:fastfold_savehook = 1
      let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C', 'r', 'R', 'm', 'M']
      let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
      let g:fastfold_minlines = 0
      Plug 'Yggdroot/indentLine' " Indent with characters
      let g:indentLine_setColors = 1
      let g:indentLine_char = "\u22EE"
      let g:indentLine_color_term = 11
    " }}}
    " Statusline: {{{
      Plug 'vim-airline/vim-airline'
      " Use powerline symbols if we are in desktop mode:
      let g:airline_powerline_fonts = g:dotfiles_mode ==# 'desktop'
      " Skip empty sections:
      let g:airline_skip_empty_sections = 1
      " Don't check for whitespace errors:
      let g:airline#extensions#whitespace#enabled = 0
      " Don't detect if spelling is enabled:
      let g:airline_detect_spell = 0
      " Don't show encoding if it's standard:
      let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
      " No line number symbols:
      let g:airline_symbols = get(g:, 'airline_symbols', {})
      let g:airline_symbols.dirty= 'â€¦'
      let g:airline_symbols.linenr = ''
      let g:airline_symbols.maxlinenr = ''
      " ALE:
      let g:airline#extensions#ale#enabled = (complete_package !=# 'coc.nvim')
      " Turn off line number of first error:
      let g:airline#extensions#ale#show_line_numbers = 0
      " ALE Error Symbols:
      let g:airline#extensions#ale#error_symbol = g:airline_powerline_fonts ? "\uf05e\u2003" : 'E: ' 
      let g:airline#extensions#ale#warning_symbol = g:airline_powerline_fonts ? "\uf071\u2003" : 'W: '
      let g:airline#extensions#ale#checking_symbol = g:airline_powerline_fonts ? "\uf110" : '...'
      " Disable the differentiation between INSERT and INSERT COMPL:
      let g:airline_mode_map = get(g:, 'airline_mod_map', {})
      let g:airline_mode_map['ic'] = 'INSERT'
      augroup start_airline
        autocmd!
        autocmd VimEnter * call dotfiles#airline#init()
      augroup END
    " }}}
    " Syntax: {{{
      Plug 'neoclide/vim-jsx-improve'
      Plug 'plasticboy/vim-markdown'
      let g:vim_markdown_frontmatter = 1 " Format YAML
      let g:vim_markdown_strikethrough = 0 " Don't format strikethrough
      let g:vim_markdown_conceal = 0 " Don't conceal
      let g:vim_markdown_conceal_code_blocks = 0 " Don't conceal code blocks
      let g:vim_markdown_math = 1 " Do process MathJaX and LaTeX math
      Plug 'cakebaker/scss-syntax.vim'
      Plug 'oncomouse/vim-fish' " Async vim-fish
      Plug 'elzr/vim-json'
      let g:vim_json_syntax_conceal = 0
      Plug 'tbastos/vim-lua' " For Lua
      Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'} " For Python
    " }}}
    " Text Object Plugins: {{{
      Plug 'kana/vim-textobj-user' " Allow custom textobj definitions
      Plug 'kana/vim-textobj-function' " af, if, aF, iF select function
      Plug 'thinca/vim-textobj-function-javascript' " js function support
      Plug 'haya14busa/vim-textobj-function-syntax' " syntax-based function support
      Plug 'coderifous/textobj-word-column.vim' " ic, ac, aC, iC column selections
    " }}}
    " Autocomplete: {{{
      " Need NeoYank for some lists to implement yank history:
      if g:complete_package ==# 'denite' || g:complete_package ==# 'fzf'
        Plug 'Shougo/neoyank.vim'
      endif
      " Load a list manager:
      if g:complete_package ==# 'clap'
        Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
      elseif g:complete_package ==# 'fzf'
        Plug 'oncomouse/fzf-neoyank' " Add Yank shortcut
      elseif g:complete_package ==# 'denite'
        Plug 'Shougo/denite.nvim', { 'do' : ':UpdateRemotePlugins' }
        Plug 'neoclide/denite-extra' " Adds location_list and quickfix_list as denite sources
      endif
      " Load LSP + Completion:
      if g:complete_package =~# 'coc.nvim'
        Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
      else
        Plug 'autozimu/LanguageClient-neovim', {
        \ 'branch': 'next',
        \ 'do': 'bash install.sh',
        \ }
        " ncm2 for completion:
        Plug 'roxma/nvim-yarp'
        Plug 'ncm2/ncm2'
        Plug 'Shougo/neco-vim'
        Plug 'ncm2/ncm2-vim'
        Plug 'ncm2/ncm2-bufword'
        Plug 'ncm2/ncm2-path'
        Plug 'oncomouse/ncm2-biblatex'
      endif
      " ALE for linting:
      if complete_package !=# 'coc.nvim'
        Plug 'dense-analysis/ale'
        let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
        let g:ale_lint_on_insert_leave = 1
        let g:ale_cursor_detail = 0
        let g:ale_disable_lsp = 1
        let g:ale_fix_on_save = 1
        let g:ale_pattern_options = {
          \  '\.min.js$': {'ale_enabled': 0},
          \  'build/.*$': {'ale_enabled': 0},
          \}
        let g:ale_set_signs = 0 " Turn off sign column
        " Specific linters:
        let g:ale_lua_luacheck_options = '-d'
        let g:ale_javascript_standard_executable = 'semistandard'
      endif
      Plug 'wellle/tmux-complete.vim' " Adds TMUX buffers as a completion source
    " }}}
    " Writing: {{{
      Plug 'godlygeek/tabular' " :Tabular /| to auto-align tables (also :TableFormat in markdown)
      Plug 'reedes/vim-textobj-sentence' " Use as & is for selecting sentences; g) and g( for moving
    " }}}
  endif
call plug#end()
" }}}
" Maps & Abbreviations: {{{
  " Shortcut to view current syntax highlighting group:
  map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
    \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
    \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
  " Select whole file
  nnoremap <leader>vf ggVG
  " Clear currently highlighted regexp:
  nnoremap <silent> <leader>cr :let<C-u>let @/=""<CR>
  " Highlight a block and type "@" to run a macro on the block:
  xnoremap <silent> @ :<C-u>call visualat#ExecuteMacroOverVisualRange()<CR>
  " Update fast folds:
  nmap zuz <Plug>(FastFoldUpdate)
  " Fuzzy Search Bindings: {{{
    " Every list source we could implement (see g:complete_package) implements
    " these commmands, so I can use CoC or clap and they implement the FZF
    " interface. This unifies the list management:
    nnoremap <silent> <c-p> :Files<CR>
    nnoremap <silent> <leader>F :Files ~<CR>
    nnoremap <silent> <leader>q :QuickfixList<CR>
    nnoremap <silent> <leader>d :LocationList<CR>
    nnoremap <silent> <leader>a :Buffers<CR>
    nnoremap <silent> <leader>A :Windows<CR>
    nnoremap <silent> <leader>l :BLines<CR>
    nnoremap <silent> <leader>? :History<CR>
    nnoremap <silent> <leader>/ :execute 'Rg ' . input('Rg/')<CR>
    nnoremap <silent> <leader>y :Yanks<CR>
    nnoremap <silent> <leader>s :Symbols<CR>
  " }}}
" }}}
" Autocmds: {{{
  augroup dotfile-autocmds
    autocmd!
    " On opening a file, jump to the last known cursor position (see :h line())
    autocmd BufReadPost *
          \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit' |
          \   exe "normal! g`\"" |
          \ endif 
  augroup END
" }}}
" Theme: {{{
set background=dark
" Only use termguicolors if in desktop mode:
if g:dotfiles_mode ==# 'desktop'
  if exists('+termguicolors')
    let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
    " nvim-colorizer.lua: {{{
    if has('nvim')
lua << EOF
require'colorizer'.setup{
  '*';
  markdown={
    names = false
  };
  text={
    names = false
  }
}
EOF
    endif
" }}}
  endif
endif
if has('nvim-0.5')
lua <<EOF
require'nvim-treesitter.configs'.setup {
  -- one of "all", "language", or a list of languages
  ensure_installed = { "javascript", "python", "lua", "markdown", "yaml", "css", "javascript", "html" },
  highlight = {
    enable = true,
  },
}
EOF
endif
colorscheme tempus_classic
" Setup terminal colors:
call dotfiles#colors#termcolors()
" Tempus Classic Additions: {{{
  hi Visual guibg=#8e9cc0 ctermbg=12
  hi Search guibg=#b1942b guifg=#232323 ctermbg=3 ctermbg=0 gui=NONE cterm=NONE
  hi gitcommitSummary guifg=#7aa880 ctermfg=7
  hi gitcommitOverflow cterm=bold gui=bold ctermbg=13 guibg=#d58888 guifg=#232323 ctermfg=0
  hi HighlightedyankRegion ctermbg=9 guibg=#d0913d ctermfg=0 guifg=#232323
  hi CocErrorSign guibg=#312e30 guifg=#d2813d ctermfg=1 ctermbg=8
  hi CocWarningSign guibg=#312e30 guifg=#b1942b ctermfg=3 ctermbg=8
  hi CocInfoSign guibg=#312e30 guifg=#d2813d ctermfg=3 ctermbg=8
  hi VisualMode guifg=#312e30 ctermfg=8 guibg=#d0913d ctermbg=9 cterm=bold gui=bold
  hi InsertMode guifg=#312e30 ctermfg=8 guibg=#8c9e3d ctermbg=2 cterm=bold gui=bold
  hi ReplaceMode guifg=#312e30 ctermfg=8 guibg=#d58888 ctermbg=13 cterm=bold gui=bold
  hi CommandMode guifg=#312e30 ctermfg=8 guibg=#C594C5 ctermbg=6 cterm=bold gui=bold
  hi NormalMode guifg=#312e30 ctermfg=8 guibg=#6e9cb0 ctermbg=4 cterm=bold gui=bold
  hi StatusLine guifg=#312e30 ctermfg=8 guibg=NONE ctermbg=NONE cterm=NONE gui=NONE
  hi StatusLineNC guifg=#a8a030 ctermfg=11 guibg=#312e30 ctermbg=8 cterm=NONE gui=NONE
  hi StatusLineTerm guifg=#96a42d ctermfg=10 guibg=#8c9e3d ctermbg=2 cterm=NONE gui=NONE
  hi StatusLineTermNC guifg=#a8a030 ctermfg=11 guibg=#312e30 ctermbg=8 cterm=NONE gui=NONE
  " hi User1 ctermbg=8 guibg=#312e30 cterm=bold gui=bold
  " hi User2 ctermbg=8 guibg=#312e30 cterm=NONE gui=NONE
  " hi User3 guifg=#312e30 ctermfg=8 guibg=#b1942b ctermbg=3 cterm=NONE gui=NONE
  " hi User4 guifg=#312e30 ctermfg=8 guibg=#d2813d ctermbg=1 cterm=NONE gui=NONE
  " hi User5 guifg=#aeadaf ctermfg=15 guibg=#312e30 ctermbg=8 cterm=none gui=none
  " hi User6 guifg=#312e30 ctermfg=8 guibg=#232323 ctermbg=0 cterm=NONE gui=NONE
  hi SpellBad gui=underline guifg=#aeadaf guibg=#312e30 cterm=underline ctermfg=15
  hi Pmenu gui=none guibg=#312e30 guifg=#aeadaf cterm=none ctermbg=8 ctermfg=15
  hi MarkdownItalic guifg=#d58888
  hi link htmlItalic MarkdownItalic
  hi link htmlBold MarkdownBold
  " hi link htmlTag Noise
  " hi link htmlEndTag Noise
" }}}
" Semishi Formatting: {{{
  hi semshiLocal           ctermfg=209 guifg=#ff875f
  hi semshiGlobal          ctermfg=214 guifg=#d2813d
  hi semshiImported        ctermfg=214 guifg=#ffaf00 cterm=bold gui=bold
  hi semshiParameter       ctermfg=75  guifg=#6e9cb0
  hi semshiParameterUnused ctermfg=117 guifg=#8e9cc0 cterm=underline gui=underline
  hi semshiFree            ctermfg=218 guifg=#b58d88
  hi semshiBuiltin         ctermfg=207 guifg=#d58888
  hi semshiAttribute       ctermfg=49  guifg=#6da280
  hi semshiSelf            ctermfg=249 guifg=#949d9f
  hi semshiUnresolved      ctermfg=226 guifg=#b1942b cterm=underline gui=underline
  hi semshiSelected        ctermfg=231 guifg=#232323 ctermbg=161 guibg=#ff875f

  hi semshiErrorSign       ctermfg=231 guifg=#aeadaf ctermbg=160 guibg=#d70000
  hi semshiErrorChar       ctermfg=231 guifg=#aeadaf ctermbg=160 guibg=#d70000
" }}}
let g:clap_theme = 'tempus_classic'
" }}}
" Load Autocompletion: {{{
call dotfiles#autocomplete()
if (g:dotfiles_mode ==# 'desktop')
  nmap <silent> <F2> <Plug>(dotfiles-rename)
  nmap <silent> <F5> <Plug>(dotfiles-commands)
  nmap <silent> gd <Plug>(dotfiles-definition)
  nmap <silent> gy <Plug>(dotfiles-type-definition)
  nmap <silent> gi <Plug>(dotfiles-implementation)
  nmap <silent> gr <Plug>(dotfiles-references)
  nmap <silent> K <Plug>(dotfiles-documentation)
  nmap <silent> [d <Plug>(dotfiles-diagnostic-previous)
  nmap <silent> ]d <Plug>(dotfiles-diagnostic-next)
endif
" }}}
" Todo Configuration: {{{
" This is many of the commands from taskpaper.vim but set to load on my
" todo.txt file and using my done notation. Also, turns off all the
" formatting.
augroup todo
  autocmd!
  " Mark a task as done:
  autocmd BufRead,BufNewFile todo.* nnoremap <buffer> <leader>td A X<esc>
  autocmd BufRead,BufNewFile todo.* vnoremap <buffer> <leader>td A X<esc>
  " Go To Project
  autocmd BufRead,BufNewFile todo.* nnoremap <buffer> <leader>tg :call dotfiles#todo#GoToProject()<CR>
  " Search for done tasks:
  autocmd BufRead,BufNewFile todo.* nnoremap <buffer> <leader>t/ / X$<CR>
  " Go To Next Project:
  autocmd BufRead,BufNewFile todo.* nnoremap <buffer> <leader>tj :call dotfiles#todo#NextProject()<CR>
  " Go To Previous Project:
  autocmd BufRead,BufNewFile todo.* nnoremap <buffer> <leader>tk :call dotfiles#todo#PrevProject()<CR>
augroup END
" }}}
" Update fasd for NeoVim: {{{
if has('nvim')
  function! s:fasd_update() abort
    if empty(&buftype)
      call jobstart(['fasd', '-A', expand('%:p')])
    endif
  endfunction
  augroup fasd
    autocmd!
    autocmd BufWinEnter,BufFilePost * call s:fasd_update()
  augroup END
endif
" }}}
" Server only settings: {{{
  set statusline=%!dotfiles#statusline#statusline()
  set tabline=%!dotfiles#statusline#tabline()
  if dotfiles_mode ==# 'server'
    augroup dotfiles-server-au
      autocmd!
      " Turn on CursorLine Highlighting on Insert:
      autocmd InsertEnter,InsertLeave * set cul!
    augroup END
  endif
" }}}
" # vim:foldmethod=marker
